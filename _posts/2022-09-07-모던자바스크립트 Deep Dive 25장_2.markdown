---
layout: post
title:  모던자바스크립트 Deep Dive 25장_2
date:   2022-09-07 18:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

# 25장 클래스

---

# 25.7 프로퍼티

## 25.7.1 인스턴스 프로퍼티

- 인스턴스 프로퍼티는 constructor 내부에서 정의해야 한다.

```jsx
class Person {
	constructor(name) {
		// 인스턴스 프로퍼티
	this.name = name;
	}
}

const me = new Person('Lee');
console.log(me); // Person {name: "Lee"}
```

- constructor 내부 코드가 실행되기 이전에 constructor내부의 this에는 이미 클래스가 암묵적으로 생성한 인스턴스인 빈 객체가 바인딩되어 있다.
- 생성자 함수에서 생성자 함수가 생성할 인스턴스의 프로퍼티를 정의하는 것과 마찬가지로 constructor 내부에서 this에 인스턴스 프로퍼티를 추가한다.
- 이로써 클래스가 암묵적으로 생성한 빈 객체, 즉 인스턴스에 프로퍼티가 추가되어 인스턴스가 초기화 된다.

 

```jsx
class Person {
  constructor(name) {
    // 인스턴스 프로퍼티
    this.name = name; // name 프로퍼티는 public하다.
  }
}

const me = new Person('Lee');

// name은 public하다.
console.log(me.name); // Lee
```

- this에 추가한 프로퍼티는 언제나 클래스가 생성한 인스턴스의 프로퍼티가 된다.
- private, protected, public과 같은 접근 제한자를 지원하지 않는다.
    
    → 인스턴스 프로퍼티는 언제나 public하다.
    

## 25.7.2 접근자 프로퍼티

- 자체적으로 값([[내부슬롯]])을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.

```jsx
const person = {
  // 데이터 프로퍼티
  firstName: 'Ungmo',
  lastName: 'Lee',

  // fullName은 접근자 함수로 구성된 접근자 프로퍼티다.
  // getter 함수
  get fullName() {
    return `${this.firstName} ${this.lastName}`;
  },
  // setter 함수
  set fullName(name) {
    // 배열 디스트럭처링 할당: "36.1. 배열 디스트럭처링 할당" 참고
    [this.firstName, this.lastName] = name.split(' ');
  }
};

// 데이터 프로퍼티를 통한 프로퍼티 값의 참조.
console.log(`${person.firstName} ${person.lastName}`); // Ungmo Lee

// 접근자 프로퍼티를 통한 프로퍼티 값의 저장
// 접근자 프로퍼티 fullName에 값을 저장하면 setter 함수가 호출된다.
person.fullName = 'Heegun Lee';
console.log(person); // {firstName: "Heegun", lastName: "Lee"}

// 접근자 프로퍼티를 통한 프로퍼티 값의 참조
// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.
console.log(person.fullName); // Heegun Lee

// fullName은 접근자 프로퍼티다.
// 접근자 프로퍼티는 get, set, enumerable, configurable 프로퍼티 어트리뷰트를 갖는다.
console.log(Object.getOwnPropertyDescriptor(person, 'fullName'));
// {get: f, set: f, enumerable: true, configurable: true}
```

- 접근자 프로퍼티는 클래스에서도 사용할 수 있다.
- 위 예제의 객체 리터럴을 클래스로 표현하면 다음과 같다.

```jsx
class Person {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  // fullName은 접근자 함수로 구성된 접근자 프로퍼티다.
  // getter 함수
  get fullName() {
    return `${this.firstName} ${this.lastName}`;
  }

  // setter 함수
  set fullName(name) {
    [this.firstName, this.lastName] = name.split(' ');
  }
}

const me = new Person('Ungmo', 'Lee');

// 데이터 프로퍼티를 통한 프로퍼티 값의 참조.
console.log(`${me.firstName} ${me.lastName}`); // Ungmo Lee

// 접근자 프로퍼티를 통한 프로퍼티 값의 저장
// 접근자 프로퍼티 fullName에 값을 저장하면 setter 함수가 호출된다.
me.fullName = 'Heegun Lee';
console.log(me); // {firstName: "Heegun", lastName: "Lee"}

// 접근자 프로퍼티를 통한 프로퍼티 값의 참조
// 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.
console.log(me.fullName); // Heegun Lee

// fullName은 접근자 프로퍼티다.
// 접근자 프로퍼티는 get, set, enumerable, configurable 프로퍼티 어트리뷰트를 갖는다.
console.log(Object.getOwnPropertyDescriptor(Person.prototype, 'fullName'));
// {get: f, set: f, enumerable: false, configurable: true}
```

- 접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수, 즉 getter 함수와 setter 함수로 구성되어 있다.

- getter는 인스턴스 프로퍼티에 접근할 때마다 프로퍼티 값을 조작하거나 별도의 행위가 필요할 때 사용한다.
- getter는 메서드 이름 앞에 get 키워드를 사용해 정의한다.
- setter는 인스턴스 프로퍼티에 값을 할당할 때마다 프로퍼티 값을 조작하거나 별도의 행위가 필요할 때 사용한다.
- setter는 메서드 이름 앞에 set 키워드를 사용해 정의한다.

- 이때 getter와 setter 이름은 인스턴스 프로퍼티처럼 사용된다.
- getter는 호출하는 것이 아니라 프로퍼티처럼 참조하는 형식으로 사용하며, 참조시에 내부적으로 getter가 호출된다.
- setter도 호출하는 것이 아니라 프로퍼티처럼 값을 할당하는 형식으로 사용하며, 할당 시에 내부적으로 setter가 호출된다.

- getter는 이름 그대로 무언가를 취득할 때 사용하므로 반드시 무언가를 반환해야 하고 setter는 무언가를 프로퍼티에 할당해야 할 때 사용하므로 반드시 매개변수가 있어야 한다.
- setter는 단 하나의 값만 할당받기 때문에 단 하나의 매개변수만 선언할 수 있다.

- 클래스의 메서드는 기본적으로 프로토타입 메서드가 된다. 따라서 클래스의 접근자 프로퍼티 또한 인스턴스 프로퍼티가 아닌 프로토타입의 프로퍼티가 된다.

```jsx
// Object.getOwnPropertyNames는 비열거형(non-enumerable)을 포함한 모든 프로퍼티의 
// 이름을 반환한다.(상속 제외)
Object.getOwnPropertyNames(me); // -> ["firstName", "lastName"]
Object.getOwnPropertyNames(Object.getPrototypeOf(me)); // -> ["constructor", "fullName"]
```

![Untitled](https://user-images.githubusercontent.com/75876669/207610852-e30ff0cb-0528-4cd5-9c5e-a5aa202c68f4.png)

## 25.7.3 클래스 필드 정의 제안

- 클래스 필드 : 클래스 기반 객체 지향 언어에서 클래스가 생성할 인스턴스의 프로퍼티를 가리키는 용어

- 클래스 기반 객체지향 언어인 자바의 클래스 정의 (자바의 클래스 필드는 마치 클래스 내부에서 변수처럼 사용된다.)

```jsx
// 자바의 클래스 정의
public class Person {
  // 1. 클래스 필드 정의
  // 클래스 필드는 클래스 몸체에 this 없이 선언해야 한다.
  private String firstName = "";
  private String lastName = "";

  // 생성자
  Person(String firstName, String lastName) {
    // 3. this는 언제나 클래스가 생성할 인스턴스를 가리킨다.
    this.firstName = firstName;
    this.lastName = lastName;
  }

  public String getFullName() {
    // 2. 클래스 필드 참조
    // this 없이도 클래스 필드를 참조할 수 있다.
    return firstName + " " + lastName;
  }
}
```

- 자바스크립트의 클래스에서 인스턴스 프로퍼티를 선언하고 초기화하려면 반드시 constructor 내부에서 this에 프로퍼티를 추가해야 한다.
- 자바의 클래스에서는 위 예제의 1.와 같이 this를 생략해도 클래스 필드를 참조할 수 있다.

- 클래스 기반 객체지향 언어의 this는 언제나 클래스가 생성할 인스턴스를 가리킨다.
- 위 예제의 3.과 같이 this는 주로 클래스 필드가 생성자 또는 메서드의 매개변수 이름과 동일할 때 클래스 필드임을 명확히 하기 위해 사용한다.
- 자바스크립트의 클래스 몸체에는 메서드만 선언할 수 있다. 따라서 클래스 몸체에 자바와 유사하게 클래스 필드를 선언하면 문법 에러가 발생한다.

```jsx
class Person {
  // 클래스 필드 정의
  name = 'Lee';
}

const me = new Person('Lee');
```

- 하지만 위 예제를 최신 브라우저 또는 최신 Node.js에서 실행하면 문법 에러가 발생하지 않고 정상 동작한다.
- 그 이유는 자바스크립트에서도 인스턴스 프로퍼티를 마치 클래스 기반 객체 지향 언어의 클래스 필드처럼 정의할 수 있는 새로운 표준 사양인 Class field declarations가 제안되어 있다.
- 최신 브라우저와 최신 Node.js에서는 표준 사양으로 승급이 확실시되는 이 제안을 선제적으로 미리 구현해 놓았다.
- 따라서 클래스 필드의 클래스 몸체에 정의할 수 있다.

```jsx
class Person {
  // 클래스 필드 정의
  name = 'Lee';
}

const me = new Person();
console.log(me); // Person {name: "Lee"}
```

- 클래스 몸체에서 클래스 필드를 정의하는 경우 this에 클래스 필드를 바인딩해서는 안된다.
- this는 클래스의 constructor와 메서드 내에서만 유효하다.

```jsx
class Person {
  // this에 클래스 필드를 바인딩해서는 안된다.
  this.name = ''; // SyntaxError: Unexpected token '.'
}
```

- 클래스 필드를 참조하는 경우 자바와 같은 클래스 기반 객체지향 언어에서는 this를 생략할 수 있으나 자바 스크립트에서는 this를 반드시 사용해야한다

```jsx
class Person {
  // 클래스 필드
  name = 'Lee';

  constructor() {
    console.log(name); // ReferenceError: name is not defined
  }
}

new Person();
```

- 클래스 필드에 초기값을 할당하지 않으면 undefined를 갖는다.

```jsx
class Person {
  // 클래스 필드를 초기화하지 않으면 undefined를 갖는다.
  name;
}

const me = new Person();
console.log(me); // Person {name: undefined}
```

- 인스턴스를 생성할 때 외부의 초기값으로 클래스 필드를 초기화해야 할 필요가 있다면 constructor에서 클래스 필드를 초기화 해야한다.

```jsx
class Person {
  name;

  constructor(name) {
    // 클래스 필드 초기화.
    this.name = name;
  }
}

const me = new Person('Lee');
console.log(me); // Person {name: "Lee"}
```

- 인스턴스를 생성할 때 클래스 필드를 초기화할 필요가 있다면 constructor 밖에서 클래스 필드를 정의할 필요가 없다.
- 클래스 필드를 초기화할 필요가 있다면 어차피 constructor 내부에서 클래스 필드를 참조하여 초기값을 할당해야 한다.
- 이때 this, 즉 클래스가 생성한 인스턴스에 클래스 필드에 해당하는 프로퍼티가 없다면 자동추가 되기 때문

```jsx
class Person {
  constructor(name) {
    this.name = name;
  }
}

const me = new Person('Lee');
console.log(me); // Person {name: "Lee"}
```

- 함수는 일급 객체이므로 함수를 클래스 필드에 할당할 수 있다.
- 따라서 클래스 필드를 통해 메서드를 정의할 수도 있다.

```jsx
class Person {
  // 클래스 필드에 문자열을 할당
  name = 'Lee';

  // 클래스 필드에 함수를 할당
  getName = function () {
    return this.name;
  }
  // 화살표 함수로 정의할 수도 있다.
  // getName = () => this.name;
}

const me = new Person();
console.log(me); // Person {name: "Lee", getName: f}
console.log(me.getName()); // Lee
```

- 이처럼 클래스 필드에 함수를 할당하는 경우, 이 함수는 프로퍼티 메서드가 아닌 인스턴스 메서드가 된다.
    
    → 모든 클래스 필드는 인스턴스 프로퍼티가 되기 때문
    
    → 따라서 클래스 필드에 함수를 할당하는 것은 권장X
    

## 25.7.4 private 필드 정의 제안

- 자바스크립트는 캡슐화를 완전하게 지원하지 않는다.
- ES6의 클래스도 접근제한자를 지원하지 않는다.
- 따라서 인스턴스 프로퍼티는 인스턴스를 통해 클래스 외부에서 언제나 참조할 수 있다. → 언제나 public이다.

```jsx
class Person {
  constructor(name) {
    this.name = name; // 인스턴스 프로퍼티는 기본적으로 public하다.
  }
}

// 인스턴스 생성
const me = new Person('Lee');
console.log(me.name); // Lee
```

- 클래스 필드 정의 제안을 사용하더라도 클래스 필드는 기본적으로 public하기 때문에 외부에 그대로 노출된다.

```jsx
class Person {
  name = 'Lee'; // 클래스 필드도 기본적으로 public하다.
}

// 인스턴스 생성
const me = new Person();
console.log(me.name); // Lee
```

- 2020년 현재 TC39 프로세스의 stage3에는 private필드를 정의할 수 있는 새로운 표준사양이 제안되어 있다.

```jsx
class Person {
  // private 필드 정의
  #name = '';

  constructor(name) {
    // private 필드 참조
    this.#name = name;
  }
}

const me = new Person('Lee');

// private 필드 #name은 클래스 외부에서 참조할 수 없다.
console.log(me.#name);
// SyntaxError: Private field '#name' must be declared in an enclosing class
```

- 타입스크립트
- 자바스크립트의 상위 확장, public, private, protected를 모두 지원하며 의미 또한 기본적으로 동일하다.

- public 필드는 어디서든 참조할 수 있지만, private필드는 클래스 내부에서만 참조할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207610959-73f3610b-0d46-41b5-b5ce-123eb6e88b8f.png)

- 이처럼 클래스 외부에서 private 필드에 직접 접근할 수 있는 방법은 없다.
- 다만 접근자 프로퍼티를 통해 간접적으로 접근하는 방법은 유효하다.

```jsx
class Person {
  // private 필드 정의
  #name = '';

  constructor(name) {
    this.#name = name;
  }

  // name은 접근자 프로퍼티다.
  get name() {
    // private 필드를 참조하여 trim한 다음 반환한다.
    return this.#name.trim();
  }
}

const me = new Person(' Lee ');
console.log(me.name); // Lee
```

- private 필드는 반드시 클래스 몸체에 정의해야 한다.
- private 필드를 직접 constructor에 정의하면 에러가 발생한다.

```jsx
class Person {
  constructor(name) {
    // private 필드는 클래스 몸체에서 정의해야 한다.
    this.#name = name;
    // SyntaxError: Private field '#name' must be declared in an enclosing class
  }
}
```

## 25.7.5 static 필드 정의 제안

- 클래스에는 static 키워드를 사용하여 정적 메서드를 정의할 수 있다.
- 하지만 static 키워드를 사용하여 정적 필드를 정의할 수는 없다.
- 하지만 static public 필드, static private 필드, static private 메서드를 저으이할 수 있는 새로운 표준 사양이 TC39 프로세스의 stage3에 제안되어 있다.

```jsx
class MyMath {
  // static public 필드 정의
  static PI = 22 / 7;

  // static private 필드 정의
  static #num = 10;

  // static 메서드
  static increment() {
    return ++MyMath.#num;
  }
}

console.log(MyMath.PI); // 3.142857
console.log(MyMath.increment()); // 11
```

# 25.8 상속에 의한 클래스 확장

## 25.8.1 클래스 상속과 생성자 함수 상속

- 상속에 의한 클래수 확장은 프로토타입 기반 상속과는 다른 개념이다.
- 프로토타입 기반 상속은 프로토타입 체인을 통해 다른 객체의 자산을 상속받는 개념이지만 **상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 확장하여 정의**하는 것이다.

![Untitled](https://user-images.githubusercontent.com/75876669/207611036-fd3ae6de-ce28-4e26-a062-8c78e4c0d20a.png)

- 클래스와 생성자 함수는 인스턴스를 생성할 수 있는 함수라는 점에서 매우 유사하다.
- 하지만 클래스는 상속을 통해 기존 클래스를 확장할 수 있는 문법이 기본적으로 제공되지만 생성자 함수는 그렇지 않다.

- 동물을 추상화한 Animal 클래스와 새와 사자를 추상화한 Bird, Lion 클래스를 각각 정의한다고 생각해보자
- 새와 사자는 동물에 속하므로 동물의 속성을 갖는다.
- 하지만 새와 사자는 자신만의 고유한 속성도 같는다
- Animal클래스는 동물의 속성을 표현하고, Bird, Lion 클래스는 상속을 통해 Animal 클래스의 속성을 그대로 사용하면서 자신만의 고유한 속성만 추가하여 확장할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207611119-57f62534-2ca3-4197-81db-dc814706dad5.png)

- 상속을 통해 Animal 클래스를 확장한 Bird 클래스를 구현해보자

```jsx
class Animal {
  constructor(age, weight) {
    this.age = age;
    this.weight = weight;
  }

  eat() { return 'eat'; }

  move() { return 'move'; }
}

// 상속을 통해 Animal 클래스를 확장한 Bird 클래스
class Bird extends Animal {
  fly() { return 'fly'; }
}

const bird = new Bird(1, 5);

console.log(bird); // Bird {age: 1, weight: 5}
console.log(bird instanceof Bird); // true
console.log(bird instanceof Animal); // true

console.log(bird.eat());  // eat
console.log(bird.move()); // move
console.log(bird.fly());  // fly
```

- 상속에 의해 확장된 Bird를 통해 생성된 인스턴스의 프로토타입 체인

![Untitled](https://user-images.githubusercontent.com/75876669/207611231-e0f02a6d-3398-4a84-adf0-1d1f79b1b1db.png)

- 클래스는 상속을 통해 다른 클래스를 확장할 수 있는 문법인 extends 키워드가 기본적으로 제공된다.
- extends 키워드를 사용한 클래스 확장은 간편하고 직관적이다.
- 하지만 생성자 함수는 상속을 통해 다른 생성자 함수를 확장할 수 있는 문법이 제공되지 않는다.

## 25.8.2 extends 키워드

- 상속을 통해 클래스를 확장하려면 extends 키워드를 사용하여 상속받을 클래스를 정의한다.

```jsx
// 수퍼(베이스/부모)클래스
class Base {}

// 서브(파생/자식)클래스
class Derived extends Base {}
```

- 상속을 통해 확장된 클래스를 서브클래스라 부르고
- 서브클래스에게 상속된 클래스를 수퍼클래스라 부른다.
- 서브클래스를 파생클래스 또는 자식클래스
- 수퍼클래스를 베이스 클래스 또는 부모클래스라 부르기도 한다.

- extends 키워드의 역할은 수퍼 클래스와 서브 클래스간의 상속관계를 설정하는 것이다.
- 클래스도 프로토타입을 통해 상속관계를 구현한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207611344-f9fe534e-bcc8-402e-bc5e-0051befc76c3.png)

- 수퍼클래스와 서브 클래스는 인스턴스의 프로토타입체인뿐 아니라 클래스 간의 프로토타입 체인도 생성한다.
- 이를 통해 프로토타입 메서드, 정적메서드 모두 상속이 가능하다.

## 25.8.3 동적 상속

- extends 키워드는 클래스 뿐만 아니라 생성자 함수를 상속받아 클래스를 확장할 수도 있다.
- 단 extends 키워드 앞에는 반드시  클래스가 와야한다.

```jsx
// 생성자 함수
function Base(a) {
  this.a = a;
}

// 생성자 함수를 상속받는 서브클래스
class Derived extends Base {}

const derived = new Derived(1);
console.log(derived); // Derived {a: 1}
```

- extends 키워드 다음에는 클래스뿐만이 아니라 [[Construct]] 내부 메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용할 수 있다. 이를 통해 동적으로 상속받을 대상을 결정할 수 있다.

```jsx
function Base1() {}

class Base2 {}

let condition = true;

// 조건에 따라 동적으로 상속 대상을 결정하는 서브클래스
class Derived extends (condition ? Base1 : Base2) {}

const derived = new Derived();
console.log(derived); // Derived {}

console.log(derived instanceof Base1); // true
console.log(derived instanceof Base2); // false
```

## 25.8.4  서브클래스의 constructor

- 클래스에서 constructor를 생략하면 클래스에 다음과 같이 비어있는 constructor가 암묵적으로 정의된다.

```jsx
constructor() {}
```

- args는 new 연산자와 함께 클래스를 호출할 때 전달한 인수의 리스트다.

```jsx
constructor(...args) { super(...args); }
```

- super()는 수퍼클래스의 constructor(super-constructor)를 호출하여 인스턴스를 생성한다.

- 수퍼클래스와 서브클래스 모두 constructor를 생략한 경우

```jsx
// 수퍼클래스
class Base {}

// 서브클래스
class Derived extends Base {}
```

- 다음과 같이 암묵적으로 constructor가 정의된다.

```jsx
// 수퍼클래스
class Base {
  constructor() {}
}

// 서브클래스
class Derived extends Base {
  constructor() { super(); }
}

const derived = new Derived();
console.log(derived); // Derived {}
```

- 수퍼클래스와 서브클래스 모두 constructor를 생략하면 빈 객체가 생성이 된다.
- 프로퍼티를 소유하는 인스턴스를 생성하면 constructor 내부에서 인스턴스에 프로퍼티를 추가해야 한다.

## 25.8.5 super 키워드

- 함수처럼 호출할 수도 있고 this와 같이 식별자 처럼 참조할 수 있는 특수한 키워드다.

- super를 호출하면 수퍼클래스의 constructor(super-constructor)를 호출한다.
- super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.

### super호출

- 수퍼클래스의 constructor(super-constructor)를 호출한다.
- 다음예제와 같이 수퍼클래스의 constructor 내부에서 추가한 프로퍼티를 그대로 갖는 인스턴스를 생성한다면 서브클래스의 constructor를 생략할 수 있다.
- 이때 new 연산자와 함께 서브클래스를 호출하면서 전달한 인수는 모두 서브클래스에 암묵적으로 저으이된 constuctor의 super호출을 통해 수퍼클래스의 constuctor에 전달된다.

```jsx
// 수퍼클래스
class Base {
  constructor(a, b) {
    this.a = a;
    this.b = b;
  }
}

// 서브클래스
class Derived extends Base {
  // 다음과 같이 암묵적으로 constructor가 정의된다.
  // constructor(...args) { super(...args); }
}

const derived = new Derived(1, 2);
console.log(derived); // Derived {a: 1, b: 2}
```

- 수퍼클래스에서 추가한 프로퍼티와 서브클래스에서 추가한 프로퍼티를 갖는 인스턴스를 생성한다면 서브클래스의 constructor를 생략할 수 없다.
- 이때 new 연산자와 함께 서브클래스를 호출하면서 전달한 인수중에 수퍼클래스의 constructor에 전달할 필요가 있는 인수는 서브클래스의 constructor에서 호출하는 super를 통해 전달한다.

```jsx
// 수퍼클래스
class Base {
  constructor(a, b) { // 4
    this.a = a;
    this.b = b;
  }
}

// 서브클래스
class Derived extends Base {
  constructor(a, b, c) { // 2
    super(a, b); // 3
    this.c = c;
  }
}

const derived = new Derived(1, 2, 3); // 1
console.log(derived); // Derived {a: 1, b: 2, c: 3}
```

- new 연산자와 함께 Derived 클래스를 호출(1)하면서 전달한 인수 1, 2, 3은 Derived 클래스의 constructor(2)에 전달되고 super호출(3)을 통해 Base 클래스의 constructor(4)에 일부가 전달된다.

### super을 호출할때 주의사항

- 서브클래스에서 constructor를 생략하지 않는 경우 서브클래스의 constructor에서는 반드시 super를 호출해야 한다.

```jsx
class Base {}

class Derived extends Base {
  constructor() {
    // ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
    console.log('constructor call');
  }
}

const derived = new Derived();
```

- 서브 클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없다.

```jsx
class Base {}

class Derived extends Base {
  constructor() {
    // ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
    this.a = 1;
    super();
  }
}

const derived = new Derived(1);
```

- super는 반드시 서브클래스의 constructor에서만 호출한다. 서브클래스가 아닌 클래스의 constructor나 함수에서 super를 호출하면 에러가 발생한다.

```jsx
class Base {
  constructor() {
    super(); // SyntaxError: 'super' keyword unexpected here
  }
}

function Foo() {
  super(); // SyntaxError: 'super' keyword unexpected here
}
```

### super 참조

- 메서드 내에서 super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.
- 서브클래스의 프로토타입 메서드내에서 super.sayHi는 수퍼클래스의 프로토타입 메서드 sayHi를 가리킨다.

```jsx
// 수퍼클래스
class Base {
  constructor(name) {
    this.name = name;
  }

  sayHi() {
    return `Hi! ${this.name}`;
  }
}

// 서브클래스
class Derived extends Base {
  sayHi() {
    // super.sayHi는 수퍼클래스의 프로토타입 메서드를 가리킨다.
    return `${super.sayHi()}. how are you doing?`;
  }
}

const derived = new Derived('Lee');
console.log(derived.sayHi()); // Hi! Lee. how are you doing?
```

- super 참조를 통해 수퍼클래스의 메서드를 참조하려면 super가 수퍼클래스의 메서드가 바인딩된 객체, 즉 수퍼클래스의 prototype 프로퍼티에 바인딩된 프로토타입을 참조할 수 있어야 한다.

```jsx
// 수퍼클래스
class Base {
  constructor(name) {
    this.name = name;
  }

  sayHi() {
    return `Hi! ${this.name}`;
  }
}

class Derived extends Base {
  sayHi() {
    // __super는 Base.prototype을 가리킨다.
    const __super = Object.getPrototypeOf(Derived.prototype);
    return `${__super.sayHi.call(this)} how are you doing?`;
  }
}
```

- super는 자신의 참조하고 있는 메서드가 바인딩되어있는 객체의 프로토타입을 가리킨다.
- 따라서 super.sayHi는 Base.prototype.sayHi를 가리킨다.
- 단 super.sayHi를 호출할때 call 메서드를 사용해 this를 전달해야한다.

- call 메서드를  사용해 this를 전달하지 않고, Base.prototype.sayHi를 그대로 호출하면 Base.prototype.sayHi 메서드 내부의 this는 Base.prototype을 가리킨다.
- Base.prototype.sayHi 메서드는 프로터타입 메서드이기 때문에 내부의 this는 Base.prototype이 아닌 인스턴스를 가리켜야한다.
- name프로퍼티는 인스턴스에 존재하기 때문이다.

- super 참조가 동작하기 위해서는 super를 참조하고 있는 메서드가 바인딩되어 있는 객체의 프로토타입을 찾을 수 있어야한다.
- 이를 위해 메서드는 내부슬롯[[HomeObject]]를 가지며, 자신을 바인딩하고있는 객체를 가리킨다.

- 서브클래스의 정적 메서드 내에서 super.sayHi는 수퍼클래스의 정적메서드 sayHi를 가리킨다.

```jsx
// 수퍼클래스
class Base {
  static sayHi() {
    return 'Hi!';
  }
}

// 서브클래스
class Derived extends Base {
  static sayHi() {
    // super.sayHi는 수퍼클래스의 정적 메서드를 가리킨다.
    return `${super.sayHi()} how are you doing?`;
  }
}

console.log(Derived.sayHi()); // Hi! how are you doing?
```

## 25.8.6 상속 클래스의 인스턴스 생성과정

- 직사각형을 추상화한 Rectangle 클래스와 상속을 통해 Rectangle 클래스를 확장한 ColorRectangle클래스를 정의해보자

```jsx
// 수퍼클래스
class Rectangle {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }

  toString() {
    return `width = ${this.width}, height = ${this.height}`;
  }
}

// 서브클래스
class ColorRectangle extends Rectangle {
  constructor(width, height, color) {
    super(width, height);
    this.color = color;
  }

  // 메서드 오버라이딩
  toString() {
    return super.toString() + `, color = ${this.color}`;
  }
}

const colorRectangle = new ColorRectangle(2, 4, 'red');
console.log(colorRectangle); // ColorRectangle {width: 2, height: 4, color: "red"}

// 상속을 통해 getArea 메서드를 호출
console.log(colorRectangle.getArea()); // 8
// 오버라이딩된 toString 메서드를 호출
console.log(colorRectangle.toString()); // width = 2, height = 4, color = red
```

- ColorRectangle 클래스에 의해 생성된 인스턴스의 프로토타입 체인

![Untitled](https://user-images.githubusercontent.com/75876669/207611682-67dcc8d2-6734-4a14-aa6f-eb0bbda8062f.png)

- 서브클래스 ColorRectangle이 new 연산자와 함께 호출되면 다음 과정을 통해 인스턴스를 생성한다.

- 서브클래스의 super 호출
- 자바스크립트 엔진은 클래스를 평가할 때 수퍼클래스와 서브클래스를 구분하기 위해 “base” 또는 “derived”를 값으로 갖는 내부슬롯 [[ConstructorKind]]를 갖는다.
- 다른 클래스를 상속받지 않는 클래스는 내부슬롯 [[ConstructorKind]]의 값이 “base”로 설정되지만
- 다른 클래스를 상속받는 서브클래스는 내부슬롯 [[ConstructorKind]]의 값이 “derived”로 설정된다.
- 이를 통해 수퍼클래스와 서브클래스는 new 연산자와 함께 호출되었을 때의 동작이 구분된다.

- 다른 클래스를 상속받지 않는 클래스는 new 연산자와 함께 호출되었을 때 암묵적으로 빈객체, 즉 인스턴스를 생성하고 이를 this에 바인딩한다.

- 하지만 서브클래스는 자신이 직접 인스턴스를 생성하지 않고 수퍼클래스에게 인스턴스 생성을 위임한다.
- 이것이 바로 서브클래스의 constructor에서 반드시 super를 호출해야하는 이유이다.

- 서브클래스가 new 연산자와 함께 호출되면 서브클래스 constructor 내부의 super키워드가 함수처럼 호출된다.
- super가 호출되면 수퍼클래스의 constructor가 호출된다.
- 만약 서브클래스 constructor 내부에 super 호출이 없으면 에러가 발생한다.

→ 인스턴스를 생성하는 주체는 수퍼클래스이므로 super 호출이 없으면 인스턴스를 생성할 수 없기 때문이다.

- 수퍼클래스의 인스턴스 생성과 this 바인딩
- 수퍼클래스의 constructor 내부의 코드가 실행되기 전에 암묵적으로 빈 객체를 생성한다
- 이 빈 객체가 인스턴스다.
- 암묵적으로 생성된 빈객체는 this에 바인딩된다.
- 따라서 수퍼클래스의 constructor 내부의 this는 생성된 인스턴스를 가리킨다.

```jsx
// 수퍼클래스
class Rectangle {
  constructor(width, height) {
    // 암묵적으로 빈 객체, 즉 인스턴스가 생성되고 this에 바인딩된다.
    console.log(this); // ColorRectangle {}
    // new 연산자와 함께 호출된 함수, 즉 new.target은 ColorRectangle이다.
    console.log(new.target); // ColorRectangle

```

- 이때 인스턴스는 수퍼클래스가 생성한 것이다.
- 하지만 new 연산자와 함께 호추로딘 클래스가 서브클래스라느 것이 중요하다.
- 즉, new 연산자와 함께 호출된 함수를 가리키는 new.target은 서브클래스를 가리킨다.
- 따라서 인스턴스는 new.target이 가리키는 서브클래스가 생성한 것으로 처리된다.

```jsx
// 수퍼클래스
class Rectangle {
  constructor(width, height) {
    // 암묵적으로 빈 객체, 즉 인스턴스가 생성되고 this에 바인딩된다.
    console.log(this); // ColorRectangle {}
    // new 연산자와 함께 호출된 함수, 즉 new.target은 ColorRectangle이다.
    console.log(new.target); // ColorRectangle

    // 생성된 인스턴스의 프로토타입으로 ColorRectangle.prototype이 설정된다.
    console.log(Object.getPrototypeOf(this) === ColorRectangle.prototype); // true
    console.log(this instanceof ColorRectangle); // true
    console.log(this instanceof Rectangle); // true
```

- 수퍼클래스의 인스턴스 초기화
- 수퍼클래스의 constructor가 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.
- 즉, this에 바인딩 되어있는 인스턴스에 프로퍼티를 추가하고 constructor가 인수로 전달받은 초기값으로 인스텅스의 프로퍼티를 초기화한다.

```jsx
// 수퍼클래스
class Rectangle {
  constructor(width, height) {
    // 암묵적으로 빈 객체, 즉 인스턴스가 생성되고 this에 바인딩된다.
    console.log(this); // ColorRectangle {}
    // new 연산자와 함께 호출된 함수, 즉 new.target은 ColorRectangle이다.
    console.log(new.target); // ColorRectangle

    // 생성된 인스턴스의 프로토타입으로 ColorRectangle.prototype이 설정된다.
    console.log(Object.getPrototypeOf(this) === ColorRectangle.prototype); // true
    console.log(this instanceof ColorRectangle); // true
    console.log(this instanceof Rectangle); // true

    // 인스턴스 초기화
    this.width = width;
    this.height = height;

    console.log(this); // ColorRectangle {width: 2, height: 4}
  }
```

- 서브 클래스 constructor로의 복귀와 this 바인딩
- super의 호출이 종료되고 제어 흐름이 서브클래스 constructor로 돌아온다.
- 이때 super가 반환한 인스턴스가 this에 바인딩된다.
- 서브클래스는 별도의 인스턴스를 생성하지 않고 super가 반환한 인스턴스를 this에 바인딩하여 그대로 사용한다.

```jsx
// 서브클래스
class ColorRectangle extends Rectangle {
  constructor(width, height, color) {
    super(width, height);

    // super가 반환한 인스턴스가 this에 바인딩된다.
    console.log(this); // ColorRectangle {width: 2, height: 4}
```

- 이처럼 super기 호출되지 않으면 인스턴스가 생성되지 않으며, this 바인딩도 할 수 없다.
- 서브클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없는 이유가 바로 이 때문이다.

- 서브클래스의 인스턴스 초기화
- super 호출이후, 서브클래스의 constructor에 기술되어 있는 인스턴스 초기화가 실행된다.

- 인스턴스 반환
- 클래스의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환한다.

```jsx
// 서브클래스
class ColorRectangle extends Rectangle {
  constructor(width, height, color) {
    super(width, height);

    // super가 반환한 인스턴스가 this에 바인딩된다.
    console.log(this); // ColorRectangle {width: 2, height: 4}

    // 인스턴스 초기화
    this.color = color;

    // 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.
    console.log(this); // ColorRectangle {width: 2, height: 4, color: "red"}
  }
```

## 25.8.7 표준 빌트인 생성자 함수 확장

- extends 키워드는 내부메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용할 수 있다.

```jsx
// Array 생성자 함수를 상속받아 확장한 MyArray
class MyArray extends Array {
  // 중복된 배열 요소를 제거하고 반환한다: [1, 1, 2, 3] => [1, 2, 3]
  uniq() {
    return this.filter((v, i, self) => self.indexOf(v) === i);
  }

  // 모든 배열 요소의 평균을 구한다: [1, 2, 3] => 2
  average() {
    return this.reduce((pre, cur) => pre + cur, 0) / this.length;
  }
}

const myArray = new MyArray(1, 1, 2, 3);
console.log(myArray); // MyArray(4) [1, 1, 2, 3]

// MyArray.prototype.uniq 호출
console.log(myArray.uniq()); // MyArray(3) [1, 2, 3]
// MyArray.prototype.average 호출
console.log(myArray.average()); // 1.75
```

- Array 생성자 함수를 상속받아 확장한 MyArray 클래스가 생성한 인스턴스는 Array.prototype과 MyArray.prototype의 모든 메서드를 사용할 수 있다.
- 이때 주의할 것은 Array.prototype의 메서드 중 map, filter와 같이 새로운 배열을 반환하는 메서드가 MyArray 클래스의 인스턴스를 반환하는 것이다.

```jsx
console.log(myArray.filter(v => v % 2) instanceof MyArray); // true
```

- 만약 새로운 배열을 반환하는 메서드가 MyArray클래스의 인스턴스를 반환하지 않고 Array의 인스턴스를 반환하면 MyArray클래스의 메서드와 메서드 체이닝이 불가능하다.

```jsx
// 메서드 체이닝
// [1, 1, 2, 3] => [ 1, 1, 3 ] => [ 1, 3 ] => 2
console.log(myArray.filter(v => v % 2).uniq().average()); // 2
```

- 만약 MyArray클래스의 uniq 메서드가 MyArray클래스가 생서안 인스턴스가 아닌 Array가 생성한 인스턴스를 반환하게 하려면 Symbol.species를 사용하여 정적 접근자 프로퍼티를 추가한다.

```jsx
// Array 생성자 함수를 상속받아 확장한 MyArray
class MyArray extends Array {
  // 모든 메서드가 Array 타입의 인스턴스를 반환하도록 한다.
  static get [Symbol.species]() { return Array; }

  // 중복된 배열 요소를 제거하고 반환한다: [1, 1, 2, 3] => [1, 2, 3]
  uniq() {
    return this.filter((v, i, self) => self.indexOf(v) === i);
  }

  // 모든 배열 요소의 평균을 구한다: [1, 2, 3] => 2
  average() {
    return this.reduce((pre, cur) => pre + cur, 0) / this.length;
  }
}

const myArray = new MyArray(1, 1, 2, 3);

console.log(myArray.uniq() instanceof MyArray); // false
console.log(myArray.uniq() instanceof Array); // true

// 메서드 체이닝
// uniq 메서드는 Array 인스턴스를 반환하므로 average 메서드를 호출할 수 없다.
console.log(myArray.uniq().average());
// TypeError: myArray.uniq(...).average is not a function
```