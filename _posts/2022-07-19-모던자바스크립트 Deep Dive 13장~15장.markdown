---
layout: post
title:  모던자바스크립트 Deep Dive 13장~15장
date:   2022-07-19 10:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

# 13장 스코프

---

# 13.1 스코프(유효범위)란?

- 모든 프로그래밍 언어의 기본적이며 중요한 개념
- var 키워드로 선언한 변수와 let 또는 const 키워드로 선언한 변수의 스코프도 다르게 동작한다.
- 변수 그리고 함수와 깊은 관련이 있다.

- 함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수가 없다. → 매개변수의 스코프가 함수 몸체 내부로 한정되어있기 때문

```jsx
function add(x, y) {
	//매개변수는 함수 몸체 내부에서만 참조할 수 있다.
	//즉, 매개변수의 스코프는 함수 몸체 내부이다.
	console.log(x, y); // 2 5
	return x + y;
}

add(2, 5);

//매개변수는 함수 몸체 내부에서만 참조할 수 있다.
console.log(x, y) //ReferenceError : x is not defined
```

- 변수는 코드의 가장 바깥 영역뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다.
- 이때 코드블록이나 함수는 중첩될 수 있다.

```jsx
var var1 = 1; // 코드의 가장 바깥 영역에서 선언한 변수

if (true) {
  var var2 = 2; // 코드 블록 내에서 선언한 변수
  if (true) {
    var var3 = 3; // 중첩된 코드 블록 내에서 선언한 변수
  }
}

function foo() {
  var var4 = 4; // 함수 내에서 선언한 변수

  function bar() {
    var var5 = 5; // 중첩된 함수 내에서 선언한 변수
  }
}

console.log(var1); // 1
console.log(var2); // 2
console.log(var3); // 3
console.log(var4); // ReferenceError: var4 is not defined
console.log(var5); // ReferenceError: var5 is not defined
```

- 변수는 자신이 선언된 위치에 의해 자신이 유효한 범위가 결정된다.

- 모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다. 이를 스코프라 한다.
- 스코프 = 식별자가 유효한 범위

```jsx
var x = 'global';

function foo() {
  var x = 'local';
  console.log(x); // 지역변수 x -> local
}

foo();

console.log(x); // 전역변수 x -> global
```

- **식별자 결정** = 자바스크립트 엔진이 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정하는 것
    
    → 스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 한다.
    

![Untitled](https://user-images.githubusercontent.com/75876669/207595175-1dfe79e3-d1ed-4b21-a4d9-22866afb88d2.png)

- 스코프를 통해 식별자인 변수 이름의 충돌을 방지하여 같은 이름의 변수를 사용할 수 있게 한다.
- 네임스페이스 : 소속
- ex) 영희네 강아지도 멍멍이고, 철수네 강아지도 멍멍이이다. 둘다 멍멍이면 구별이 안되기 때문에 영희네 멍멍이, 철수네 멍멍이라고 언급할 수 있다.
    
    여기서 영희, 철수라고 하는 소속을 네임 스페이스라고 생각하면 된다.
    

- var 키워드 VS let 키워드(const 키워드)

```jsx
function foo() {
  var x = 1;
  // var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.
  // 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.
  var x = 2; -> x = 2;  -> 변수값 재할당
  console.log(x); // 2
}
foo();
```

```jsx
function bar() {
  let x = 1;
  // let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.
  let x = 2; // SyntaxError: Identifier 'x' has already been declared
}
bar();
```

# 13.2 스코프의 종류

![Untitled](https://user-images.githubusercontent.com/75876669/207595271-1f320acb-cc30-47b5-b627-7031bcb1c3d4.png)

## 13.2.1 전역과 전역스코프

![Untitled](https://user-images.githubusercontent.com/75876669/207595347-1d4845b0-8022-4d0b-a745-334f6f51edf9.png)

- 전역 : 코드의 가장 바깥 영역
- 전역에 변수를 선언하면 전역 스코프(유효범위)를 갖는 전역 변수가 된다.
    
    → 전역변수는 어디서든지 참조할 수 있다.
    

## 13.2.2 지역과 지역스코프

- 지역 : 함수 몸체 내부
- 지역에 변수를 선언하면 지역 스코프(유효범위)를 갖는 지역 변수가 된다.
    
    → 지역변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.
    

# 13.3 스코프 체인

- 함수는 전역에서 정의할 수 있고 함수 몸체 내부에서도 정의할 수 있다.
- 함수 몸체 내부에서 정의한 함수를 중첩함수, 중첩함수를 포함하는 함수를 외부함수라 한다.
    
    → 함수는 중첩될 수 있으므로 함수의 지역스코프도 중첩될 수 있다.
    
- **스코프가 함수의 중첩에 의해 계층적 구조를 갖는다.**
- 중첩함수의 지역 스코프는 외부함수의 지역 스코프와 계층적 구조를 갖는다.
    - 외부 함수의 지역스코프를 중첩함수의 상위스코프라 한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207595436-1780ade8-7268-4205-9582-45c78b7e8f54.png)

- 모든 지역 스코프의 최상위 스코프는 전역 스코프이다.
- 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인이라한다.
- 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.

## 13.3.1 스코프 체인에 의한 변수 검색

![Untitled](https://user-images.githubusercontent.com/75876669/207595563-b75c6e45-37f9-437b-958d-e88ae0375608.png)

- 변수를 참조하는 코드의 스코프에서 시작해서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.

→ **상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다.**

- 스코프체인으로 이루어진 계층적 구조는 부자관계로 이뤄진 상속과 유사하다

## 13.3.2 스코프 체인에 의한 함수 검색

- 함수도 식별자에 할당되기 때문에 스코프를 갖는다.

```jsx
// 전역 함수
function foo() {
  console.log('global function foo');
}

function bar() {
  // 중첩 함수
  function foo() {
    console.log('local function foo');
  }

  foo(); // local function foo;
}

bar();
```

- 스코프 = 식별자를 검색하는 규칙

# 13.4 함수 레벨 스코프

- 지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다.
    
    → 코드블록이 아닌 함수에 의해서만 지역 스코프가 생성된다
    

- C나 자바 등을 비롯한 대부분의 프로그래밍 언어는 함수 몸체뿐만 아니라 모든 코드블록(if, for, while, try/catch 등)이 지역 스코프를 만든다. 이러한 특성을 **블록 레벨 스코프**라 한다.
- **var 키워드로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체)만을 지역스코프로 인정한다.** 이러한 특성을 **함수 레벨 스코프**라 한다.

```jsx
var x = 1;

if (true) {
  // var 키워드로 선언된 변수는 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
  // 함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내에서 선언되었다 할지라도 모두 전역 변수다.
  // 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
  // 이는 의도치 않게 변수 값이 변경되는 부작용을 발생시킨다.
  var x = 10;
}

console.log(x); // 10
```

```jsx
var i = 10;

// for 문에서 선언한 i는 전역 변수다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.
for (var i = 0; i < 5; i++) {
  console.log(i); // 0 1 2 3 4
}

// 의도치 않게 변수의 값이 변경되었다.
console.log(i); // 5
```

- 이렇게 var 키워드로 선언된 변수는 함수의 코드 블록만을 지역 스코프로 인정하지만 ES6에서 도입된 let, const 키워드는 블록 레벨 스코프를 지원한다. (15장에서 자세히 배울것)

# 13.5 렉시컬 스코프

```jsx
var x = 1;

function foo() {
  var x = 10;
  bar();
}

function bar() {
  console.log(x);
}

foo(); // ?
bar(); // ?
```

- bar 함수의 상위 스코프가 무엇인지에 따라 결정된다.
    - 함수를 어디서 호출 했는지
    - 함수를 어디서 정의 했는지

- 첫번째 방식으로 한다면 bar 함수의 상위 스코프는 foo 함수의 지역 스코프와 전역스코프이다.
- 두번째 방식으로 한다면 bar 함수의 상위 스코프는 전역스코프이다.

- 첫번째 방식을 동적 스코프라 한다.
- 함수를 정의하는 시점에는 함수가 어디서 호출될지 알수 없기 때문에 함수가 호출 되는 시점에 동적으로 상위 스코프를 결정하는 것을 말한다.
- 두번째 방식을 렉시컬 스코프 또는 정적 스코프라 한다.
- 함수 정의가 평가되는 시점에 상위스코프가 정적으로 결정되는 것을 말한다.
- 자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다.

- 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프이다.



# 14장 전역 변수의 문제점

---

# 14.1 변수의 생명 주기

## 14.1.1 지역 변수의 생명주기

- 변수는 생물과 유사하게 생성되고 소멸되는 생명주기가 있다.
- 변수에 생명 주기가 없다면 프로그램을 종료할 때까지 영원히 메모리 공간을 점유한다.
- 변수는 자신이 선언된 위치에서 생성되고 소멸한다.

- 전역변수의 생명 주기는 애플리케이션의 생명주기와 같다
- 함수 내부에서 선언된 지역변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸된다.

```jsx
function foo(){
    var x = 'local'
    console.log(x); // local
    return x;
}

foo();
console.log(x); // ReferenceError : x is not defined
```

- x는 함수가 호출된 후에 생성되고 함수가 종료하면 소멸된다.
- 지역변수의 생명 주기는 함수의 생명 주기와 일치한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207595686-65541437-db4a-4e43-a0c0-9f10777e7ed0.png)

- 예외) 지역 변수의 생명 주기가 함수가 오래 생존하는 경우가 있다.
- 변수는 하나의 값을 저장하기 위해 확보된 메모리 공간 자체이다
- 따라서 변수의 생명주기는 공간이 확보된 시점부터 메모리 공간이 해제되어 가용 메모리 풀에 반환되는 시점까지이다.
- 변수는 자신이 등록된 스코프가 소멸될 때까지 유효한데 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아 있게 된다. 이는 스코프도 마찬가지이다.

```jsx
var x = 'global';

function foo() {
	console.log(x); // -> 이때 변수 x가 이미 선언되었고 undefined로 초기화 되어있다.
	var x = 'local'
}

foo();
console.log(x); // global
```

- 호이스팅은 스코프를 단위로 동작한다.
- 호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징이다.

## 14.1.2 전역 변수의 생명 주기

- var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다.
- 전역변수의 생명주기가 전역 객체의 생명주기와 일치한다.

- 전역객체 : 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체
- ex) 브라우저 환경에서의 전역 객체는 window이므로 브라우저 환경에서 var 키워드로 선언한 전역변수는 전역 객체 window의 프로퍼티이다.
    
    → 브라우저 환경에서 var 키워드로 선언한 전역 변수는 웹페이지를 닫을 때까지 유효하다.
    
- var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명주기와 일치한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207595760-16c3c4e8-a3e9-4494-9a1f-85174491c14a.png)

# 14.2 전역 변수의 문제점

- 암묵적 결합
- 모든 코드가 전역 변수를 참조하고 변경할수 있다는 뜻
- 변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다.

- 긴 생명주기
- 전역변수는 생명주기가 길다.→ 메모리 리소스도 오랜 기간 소비한다.
- var 키워드는 변수의 중복 선언을 허용하므로 변수의 의도치 않은 재할당이 이뤄질 수 있다.

```jsx
var x = 1;

//...

// 변수의 중복 선언. 기존 변수에 값을 재할당한다.
var x = 100;
console.log(x); // 100
```

- 스코프 체인 상에서 종점에 존재
- 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색된다는 것을 말한다 → 전역변수의 검색속도가 가장 느리다.

- 네임스페이스 오염
- 파일이 분리되어 있다 해도 하나의 전역 스코프를 공유한다는 것
- 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.

# 14.3 전역 변수의 사용을 억제하는 법

- 전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다.
- 변수의 스코프는 좁을수록 좋다

## 14.3.1 즉시 실행 함수

- 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.

```jsx
(function () {
  var foo = 10; // 즉시 실행 함수의 지역 변수
  // ...
}());

console.log(foo); // ReferenceError: foo is not defined
```

- 이러한 방법은 라이브러리 등에 자주 사용된다.

## 14.3.2 네임스페이스 객체

- 전역에 네임스페이스 역할을 담당할 객체를 생성하고  전역변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법

```jsx
var MYAPP = {}; // 전역 네임스페이스 객체

MYAPP.name = 'Lee';

console.log(MYAPP.name); // Lee
```

→ 네임스페이스 객체에 또 다른 네임스페이스 객체를 프로퍼티로 추가해서 네임스페이스를 계층적으로 구성할 수 있다.

```jsx
var MYAPP = {}; // 전역 네임스페이스 객체

MYAPP.person = {
  name: 'Lee',
  address: 'Seoul'
};

console.log(MYAPP.person.name); // Lee
```

- 식별자 충돌을 방지하는 효과는 있지만 네임스페이스 객체 자체가 전역변수에 할당되므로 유용해보이지는 않는다.

## 14.3.3 모듈 패턴

- 모듈 패턴은 클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만드는 것이다
- 클로저를 기반으로 동작
- 특징 : 전역 변수의 억제, 캡슐화까지 구현 가능
- 캡슐화 : 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는 것
- 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용 → 정보 은닉

```jsx
var Counter = (function () {
  // private 변수
  var num = 0;

  // 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.
  return {
    increase() {
      return ++num;
    },
    decrease() {
      return --num;
    },
    getNum() {
      return num;
    }
  };
}());

// private 변수는 외부로 노출되지 않는다.
console.log(Counter.num); // undefined
console.log(Counter.getNum());   // 0
console.log(Counter.increase()); // 1
console.log(Counter.getNum());   // 1
console.log(Counter.increase()); // 2
console.log(Counter.getNum());   // 2
console.log(Counter.decrease()); // 1
console.log(Counter.decrease()); // 0
```

- 변수는 외부로 노출되지 않지만 프로퍼티를 참조하고 조작하는 메서드를 통해서는 접근이 가능하다.

## 13.3.4 ES6 모듈

- 파일 자체의 독자적인 모듈 스코프를 제공한다.



# 15장 let, const 키워드와 블록 레벨 스코프

---

# 15.1 var 키워드로 선언한 변수의 문제점

## 15.1.1 변수 중복 선언 허용

```jsx
var x = 1;
var y = 1;

// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.

var x = 100;
// 초기화문이 없는 변수 선언문은 무시된다.
// var y;

console.log(x); // 100
console.log(y); // 1
```

- 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용이 발생한다.

## 15.1.2 함수 레벨 스코프

- var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.
- 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역변수가 된다

```jsx
// if문에서 선언한 변수의 경우
var x = 1;

if (true) {
  // x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
  // 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다.
  var x = 10;
}

console.log(x); // 10
```

```jsx
// for문에서 선언한 변수의 경우
var i = 10;

// for문에서 선언한 i는 전역 변수이다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.
for (var i = 0; i < 5; i++) {
  console.log(i); // 0 1 2 3 4
}

// 의도치 않게 i 변수의 값이 변경되었다.
console.log(i); // 5
```

- 함수 레벨 스코프는 전역변수를 남발할 가능성을 높인다
    - 의도치 않게 전역변수가 중복선언되는 경우가 발생

## 15.1.3 변수 호이스팅

- var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작
- 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다

```jsx
// 이 시점에는 변수 호이스팅에 의해 이미 foo 변수가 선언되었다(1. 선언 단계)
// 변수 foo는 undefined로 초기화된다. (2. 초기화 단계)
console.log(foo); // undefined

// 변수에 값을 할당(3. 할당 단계)
foo = 123;

console.log(foo); // 123

// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.
var foo;
```

- 프로그램의 흐름상 맞지 않고 가독성을 떨어뜨리고 오류를 발생시킬 수 있다

# 15.2 let 키워드

## 15.2.1 변수 중복 선언 금지

- let 키워드로  이름이 같은 변수를 중복 선언하면 문법에러가 발생한다

```jsx
var foo = 123;
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.
// 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.
var foo = 456;

let bar = 123;
// let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.
let bar = 456; // SyntaxError: Identifier 'bar' has already been declared
```

## 15.2.2블록 레벨 스코프

- let 키워드로 선언한 변수는 모든 코드블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다

```jsx
let foo = 1; // 전역 변수

{
  let foo = 2; // 지역 변수
  let bar = 3; // 지역 변수
}

console.log(foo); // 1
console.log(bar); // ReferenceError: bar is not defined
```

- 전역에 선언된 foo 변수와 코드블록 내에서 선언된 foo 변수는 서로 다른 별개의 변수이다

![Untitled](https://user-images.githubusercontent.com/75876669/207595865-f01c4d07-469f-48da-8f78-8821171fae49.png)

## 15.2.3 변수 호이스팅

- let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다.

```jsx
console.log(foo); // ReferenceError: foo is not defined
let foo;
```

- var의 경우

```jsx
// var 키워드로 선언한 변수는 런타임 이전에 선언 단계와 초기화 단계가 실행된다.
// 따라서 변수 선언문 이전에 변수를 참조할 수 있다.
console.log(foo); // undefined

var foo;
console.log(foo); // undefined

foo = 1; // 할당문에서 할당 단계가 실행된다.
console.log(foo); // 1
```

![Untitled](https://user-images.githubusercontent.com/75876669/207595954-dcaf4525-ec14-4b74-a42b-a2d22c9845d3.png)

- let의 경우 - 선언단계와 초기화 단계가 분리되어 진행된다

```jsx
// 런타임 이전에 선언 단계가 실행된다. 아직 변수가 초기화되지 않았다.
// 초기화 이전의 일시적 사각 지대에서는 변수를 참조할 수 없다.
console.log(foo); // ReferenceError: foo is not defined

let foo; // 변수 선언문에서 초기화 단계가 실행된다.
console.log(foo); // undefined

foo = 1; // 할당문에서 할당 단계가 실행된다.
console.log(foo); // 1
```

- 초기화 단계가 실행되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다
- 일시적 사각지대 : 스코프의 시작지점부터 초기화 시작 지점까지 변수를 참조할 수 없는 구간

![Untitled](https://user-images.githubusercontent.com/75876669/207596034-d10a8c12-dc46-4a57-b33d-06e492ea278f.png)

- 변수 호이스팅이 발생하지 않는 것처럼 보이지만 여전히 호이스팅이 발생한다

```jsx
let foo = 1; // 전역 변수

{
  console.log(foo); // ReferenceError: 초기화 전에 'foo'에 액세스할 수 없습니다
  let foo = 2; // 지역 변수
}
```

## 15.2.4 전역 객체와 let

```jsx
// 이 예제는 브라우저 환경에서 실행해야 한다.

// 전역 변수
var x = 1;
// 암묵적 전역
y = 2;
// 전역 함수
function foo() {}

// var 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티다.
console.log(window.x); // 1
// 전역 객체 window의 프로퍼티는 전역 변수처럼 사용할 수 있다.
console.log(x); // 1

// 암묵적 전역은 전역 객체 window의 프로퍼티다.
console.log(window.y); // 2
console.log(y); // 2

// 함수 선언문으로 정의한 전역 함수는 전역 객체 window의 프로퍼티다.
console.log(window.foo); // f foo() {}
// 전역 객체 window의 프로퍼티는 전역 변수처럼 사용할 수 있다.
console.log(foo); // f foo() {}
```

- let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다
    
    →window. foo와 같이 접근할 수 없다
    

```jsx
// 이 예제는 브라우저 환경에서 실행해야 한다.
let x = 1;

// let, const 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티가 아니다.
console.log(window.x); // undefined
console.log(x); // 1
```

# 15.3 const 키워드

- 상수를 선언하기 위해 사용(그렇다고 상수만을 위해 사용하지는 않는다)

## 15.3.1 선언과 초기화

- const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화 해야한다.

```jsx
const foo = 1;

------------------------------------------

const foo; // SyntaxError : 상수 선언에 초기 설정 누락
```

- let과 같이 블록 레벨 스코프를 가지고 변수 호이스팅이 발생하지 않는 것처럼 동작한다

```jsx
{
  // 변수 호이스팅이 발생하지 않는 것처럼 동작한다
  console.log(foo); // ReferenceError: Cannot access 'foo' before initialization
  const foo = 1;
  console.log(foo); // 1
}

// 블록 레벨 스코프를 갖는다.
console.log(foo); // ReferenceError: foo is not defined
```

## 15.3.2 재할당 금지

```jsx
const foo = 1;
foo = 2; // TypeError : 재할당 불가
```

## 15.3.3 상수

- const키워드로 선언한 변수에 원시 값을 할당한 경우 변수값을 변경할 수 없다
    
    → 그래서 상수를 표현하는데 사용한다
    

- 상수 = 재할당이 금지된 변수
- 상수는 상태유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야한다

```jsx
// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값이다.
// 변수 이름을 대문자로 선언해 상수임을 명확히 나타낸다.
const TAX_RATE = 0.1;

// 세전 가격
let preTaxPrice = 100;

// 세후 가격
let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);

console.log(afterTaxPrice); // 110
```

## 15.3.4 const 키워드와 객체

- const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다

```jsx
const person = {
  name: 'Lee'
};

// 객체는 변경 가능한 값이다. 따라서 재할당없이 변경이 가능하다.
person.name = 'Kim';

console.log(person); // {name: "Kim"}
```

- const 키워드는 재할당을 금지할 뿐 ‘불변’을 의미하지는 않는다

→ 새로운 값을 재할당하는 것을 불가능하지만 프로프티  동적 생성, 삭제, 변경을 통해 객체를 변경하는 것은 가능하다

# 15.4 var VS let VS const

- ES6를 사용한다면 var 키워드는 사용하지 않는다
- 재할당이 필요한 경우 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다
- 변경이 발생하지 않고 읽기 전용으로 사용하는 원시값과 객체에는 const 키워드를 사용한다.