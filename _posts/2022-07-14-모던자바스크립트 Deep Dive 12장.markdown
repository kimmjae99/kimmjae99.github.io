---
layout: post
title:  모던자바스크립트 Deep Dive 12장
date:   2022-07-14 10:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

# 12장 함수

---

# 12.1 함수란?

- 자바스크립트에서 가장 중요한 핵심 개념

![Untitled](https://user-images.githubusercontent.com/75876669/207593590-2bb65adb-8a36-49e9-8089-db844cfa6ddb.png)

```jsx
// f(x, y) = x + y;
function add(x, y) {
	return x + y;
}

// f(2, 5) = 7
add(2, 5); // 7
```

- 프로그래밍 언어의 **함수는 일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.**
- 함수 내부로 입력을 전달 받는 변수 = 매개변수
- 입력 = 인수
- 출력 = 반환값
- 함수는 값이며, 여러 개 존재할 수 있으므로 특정 함수를 구별하기 위해 식별자인 함수 이름을 사용할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207593711-534b299e-15f8-4464-8863-db1c543c70f7.png)

- 함수는 **함수 정의**를 통해 생성한다.

- 함수 선언문을 통해 함수를 정의한 예

```jsx
// 함수 정의
function add(x, y) {
  return x + y;
}
```

- 함수 정의만으로 함수가 실행되는 것은 아니다.
- 인수를 매개변수를 통해 함수에 전달하면서 함수의 실행을 명시적으로 지시해야한다.
    
    → 함수 호출
    
- 함수를 호출하면 코드 블록에 담긴 문들이 일괄적으로 실행되고 실행결과(반환값)를 반환한다.

```jsx
// 함수 호출
var result = add(2, 5);

// 함수 add에 인수 2, 5를 전달하면서 호출하면 반환값 7을 반환한다.
console.log(result); // 7
```

# 12.2 함수를 사용하는 이유

- 동일한 작업을 반복적으로 수행해야 한다면 여러번 작성하는 것이 아니라 미리 정의된 함수를 재사용 하는 것이 효율적이다.
    
    → 코드의 재사용
    
- 중복된 횟수에 비례해서 코드 수정에 걸리는 시간이 증가한다 또한 사람은 실수를 하기 마련이므로 실수할 가능성이 높아진다.
    
    → 유지보수의 편의성, 코드의 신뢰성
    
- 적절한 함수 이름은 함수의 내부 코드를 이해하지 않고도 함수의 역할을 파악할 수 있게 돕는다.
    
    → 코드의 가독성
    

# 12.3 함수 리터럴

- 숫자 값을 숫자 리터럴로 생성하고 객체를 객체 리터럴로 생성하는 것처럼 함수도 함수 리터럴로 생성할 수 있다.
- function키워드, 함수 이름,  매개변수 목록, 함수 몸체로 구성

```jsx
// 변수에 함수 리터럴을 할당
var f = function add(x, y) {
  return x + y;
};
```

![Untitled](https://user-images.githubusercontent.com/75876669/207593852-15a634e8-68da-498c-aa1f-afbeb6c357f4.png)

- 리터럴 = 값을 생성하기 위한 표기법
    
    → 함수 리터럴도 평가되어 값을 생성한다. 
    
    → 이 값은 객체이다.
    
    → 함수는 객체이다.
    

함수는 객체이지만 일반 객체와 다르다.

→ **일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.**

→ 일반 객체에는 없는 함수 객체만의 고유한 프로퍼티를 갖는다.

# 12.4 함수 정의

- 함수 정의란 함수를 호출하기 이전에 인수를 전달받을 매개변수와 실행할 문들 그리고 값을 지정하는 것

![Untitled](https://user-images.githubusercontent.com/75876669/207593943-cecdb172-3c9e-49fd-8ef2-b7e0cce0e1ca.png)

## 12.4.1 함수 선언문

```jsx
// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 참조
// console.dir은 console.log와는 달리 함수 객체의 프로퍼티까지 출력한다.
// 단, Node.js 환경에서는 console.log와 같은 결과가 출력된다.
console.dir(add); // ƒ add(x, y)

// 함수 호출
console.log(add(2, 5)); // 7
```

- 함수 선언문은 함수 리터럴과 형태가 동일하다.
- 함수리터럴은 함수 이름을 생략할 수 있으나 함수 선언문은 함수 이름을 생략할 수 없다.

```jsx
// 함수 선언문은 표현식이 아닌 문이므로 변수에 할당할 수 없다.
// 하지만 함수 선언문이 변수에 할당되는 것처럼 보인다.
var add = function add(x, y) {
  return x + y;
};

// 함수 호출
console.log(add(2, 5)); // 7
```

- 자바스크립트 엔진은 **생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 거기에 함수 객체를 할당한다.**

- 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.
- 즉, 함수 선언문으로 생성한 함수를 호출한 것은 함수 이름 add가 아니라 자바스크립트 엔진이 암묵적으로 생성한 식별자 add인 것이다.

![Untitled](https://user-images.githubusercontent.com/75876669/207594059-135c8418-52b3-43ac-a5ab-c819d78b4d1d.png)

## 12.4.2 함수 표현식

- 자바스크립트의 함수는 객체 타입의 값
- 변수에 할당할 수도 있고 프로퍼티 값이 될 수도 있으며 배열의 요소가 될 수도 있다.
- 이처럼 값의 성질을 갖는 객체를 **일급 객체**라 한다

- 힘스 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다.
- 이러한 함수 정의 방식을 함수 표현식이라 한다.

```jsx
// 함수 표현식
var add = function (x, y) {
  return x + y;
};

console.log(add(2, 5)); // 7
```

- 함수 리터럴의 함수 이름은 생략할 수 있다. 이러한 함수를 익명함수라 한다.
- 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적

```
// 기명 함수 표현식
var add = function foo (x, y) {
  return x + y;
};

// 함수 객체를 가리키는 식별자로 호출
console.log(add(2, 5)); // 7

// 함수 이름으로 호출하면 ReferenceError가 발생한다.
// 함수 이름은 함수 몸체 내부에서만 유효한 식별자다.
console.log(foo(2, 5)); // ReferenceError: foo is not defined
```

## 12.4.3 함수 생성 시점과 함수 호이스팅

```
// 함수 참조
console.dir(add); // ƒ add(x, y)
console.dir(sub); // undefined

// 함수 호출
console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // TypeError: sub is not a function

// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 표현식
var sub = function (x, y) {
  return x - y;
};
```

- 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.
- 하지만 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.
    
    → 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문
    

- 모든 선언문이 그렇듯 함수 선언문도 코드가 한 줄씩 순차적으로 실행되는 시점인 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다.
- **함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅 이라고 한다.**

변수 선언문과 함수 선언문의 차이

- var 키워드로 선언된 변수는 undefined로 초기화되고 함수 선언문을 통해 암묵적으로 생성된 식별자는 함수 객체로 초기화 된다.
- var 키워드를 사용한 변수 선언문 이전에 변수를 참조하면 undefined로 평가되지만 함수선언문으로 정의한 함수를 함수 선언문 이전에 호출하면 호출이 가능하다.

→ **변수 할당문의 값은 할당문이 실행되는 시점, 즉 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.**

**따라서 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.**

## 12.4.4 Function 생성자 함수

- 자바스크립트가 기본 제공하는 빌트인 함수
- 매개변수 목록과 함수 몸체를 문자열로 전달하면서 new 연산자와 함께 호출하면 함수 객체를 생성해서 반환한다.

- 생성자 함수 : 객체를 생성하는 함수

```
var add = new Function('x', 'y', 'return x + y');

console.log(add(2, 5)); // 7
```

- Function 생성자 함수로 생성한 함수는 클로저를 생성하지 않는다.
    
    → 클로저 : 함수를 실행하기 전에 해당 함수에 변수를 넘기고 싶을 때 사용된다.
    

```jsx
var add1 = (function () {
  var a = 10;
  return function (x, y) {
    return x + y + a;
  };
}());

console.log(add1(1, 2)); // 13

var add2 = (function () {
  var a = 10;
  return new Function('x', 'y', 'return x + y + a;'); 
}());

console.log(add2(1, 2)); // ReferenceError: a is not defined
```

## 12.4.5 화살표 함수

- function 키워드 대신 화살표를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다.
- 화살표 함수는 항상 익명 함수로 정의한다.

```jsx
// 화살표 함수
const add = (x, y) => x + y;
console.log(add(2, 5)); // 7
```

- 화살표 함수는 생성자 함수로 사용할 수 없으며, 기존 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며, arguments 객체를 생성하지 않는다.

 

# 12.5 함수 호출

## 12.5.1 매개변수와 인수

- 함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우
- 매개변수를 통해 인수를 전달한다.
- 인수는 값으로 평가될 수 있는 표현식이어야 하고 함수를 호출할 때 지정한다.

```jsx
// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 호출
// 인수 1과 2는 매개변수 x와 y에 순서대로 할당되고 함수 몸체의 문들이 실행된다.
var result = add(1, 2);
```

![Untitled](https://user-images.githubusercontent.com/75876669/207594152-2b17f0a5-d0d2-4f70-a757-45a3ec4ba82e.png)

- 매개변수는 함수 몸체 내부에서만 참조할 수 있고 함수 몸체 외부에서는 참조할 수 없다.

```jsx
function add(x, y) {
  console.log(x, y); // 2 5
  return x + y;
}

add(2, 5);

// add 함수의 매개변수 x, y는 함수 몸체 내부에서만 참조할 수 있다.
console.log(x, y); // ReferenceError: x is not defined
```

- 함수는 매개변수의 개수와 인수의 개수에 일치하는지 체크하지 않는다.
- 인수가 부족한 경우에 할당되지 않은 매개변수 값은 undefined이다.
- 인수가 더 많은 경우에는 초과된 인수는 무시된다.

```jsx
function add(x, y) {
  return x + y;
}

console.log(add(2)); // NaN = 2 + undefined
console.log(add(2,7,6)) // 9
```

- 이렇게 초과된 인수는 버려지지는 않는다
- 모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다.

```jsx
function add(x, y) {
  console.log(arguments);
  // Arguments(3) [2, 5, 10, callee: ƒ, Symbol(Symbol.iterator): ƒ]

  return x + y;
}

add(2, 5, 10);
```

## 12.5.2 인수 확인

- 자바스크립트의 경우 함수를 정의할 때 적절한 인수가 전달되었는지 확인할 필요가 있다.

```jsx
function add(x, y) {
	return x + y;
}

console.log(add(2));   // NaN
console.log(add('a', 'b'));    // 'ab'
```

이러한 상황이 발생한 이유

- 자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.
- 자바스크립트는 동적타입언어다. 따라서 자바스크립트 함수는 매개변수의 타입을 사전에 지정할 수 있다.

```jsx
function add(x, y) {
  if (typeof x !== 'number' || typeof y !== 'number') {
    // 매개변수를 통해 전달된 인수의 타입이 부적절한 경우 에러를 발생시킨다.
    throw new TypeError('인수는 모두 숫자 값이어야 합니다.');
  }

  return x + y;
}

console.log(add(2));        // TypeError: 인수는 모두 숫자 값이어야 합니다.
console.log(add('a', 'b')); // TypeError: 인수는 모두 숫자 값이어야 합니다.
```

- 적절한 인수가 전달되었는지 확인하더라도 부적절한 호출을 사전에 방지할 수는 없고 에러는 런타입에서 발생하게 된다.
    
    →정적 타입을 선언할 수 있는 자바스크립트의 상위 확장을 도입해서 컴파일 시점에 부적절한 호출을 방지할 수 있게 하는 것
    
- arguments 객체를 이용해 인수 개수를 확인할 수도 있다.
- 또는 인수가 전달되지 않은 경우 단축평가를 사용해 매개변수에 기본값을 할당하는 방법도 있다.

```jsx
function add(a, b, c) {
  a = a || 0;
  b = b || 0;
  c = c || 0;
  return a + b + c;
}

console.log(add(1, 2, 3)); // 6
console.log(add(1, 2)); // 3
console.log(add(1)); // 1
console.log(add()); // 0
```

- 매개변수 기본값을 사용하면 함수 내에서 수행하던 인수 체크 및 초기화를 간소화 할 수 있다.
- 매개변수 기본값은 인수를 전달하지 않았을 경우와 undefined를 전달한 경우에만 유효

```jsx
function add(a = 0, b = 0, c = 0) {
  return a + b + c;
}

console.log(add(1, 2, 3)); // 6
console.log(add(1, 2)); // 3
console.log(add(1)); // 1
console.log(add()); // 0
```

## 12.5.3 매개변수의 최대 개수

- 매개변수는 순서에 의미가 있다.
- 매개변수가 많아지면 함수의 사용법을 이해하기 어렵게 하고 실수하게 만든다.
    
    → 유지보수성이 나빠진다.
    
- 함수의 이상적인 매개변수 개수 = 0
- 이상적인 함수는 한가지 일만 해야 하며 가급적 작게 만들어야 한다.

- 객체를 인수로 사용하는 경우 프로퍼티 키만 정확히 지정하면 코드의 가독성도 좋아지게되고 실수도 줄어드는 효과가 있다.

## 12.5.4 반환문

- 함수는 return 키워드와 표현식(반환값)으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환(return)할 수 있다.

```jsx
function multiply(x, y) {
  return x * y; // 반환문
}

// 함수 호출은 반환값으로 평가된다.
var result = multiply(3, 5);
console.log(result); // 15
```

- multiply는 곱한 결과값을 return키워드를 사용해 반환한다.
- 함수 호출 표현식은 return 키워드가 반환한 표현식의 평가 결과(반환값)로 평가된다.

반환문의 2가지 역할

- 반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다.

```jsx
function multiply(x, y) {
  return x * y; // 반환문
  // 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.
  console.log('실행되지 않는다.');
}

console.log(multiply(3, 5)); // 15
```

- 반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다.
- return 키워드 뒤에 반환값으로 사용할 표현식이 명시적으로 지정되어있지 않으면 undefined가 반환된다.

```jsx
function foo () {
	return;
}

console.log(foo()); // undefined
```

- 반환문은 생략할 수 있다. (암묵적으로 undefined를 반환한다.)

```jsx
function foo () {
  // 반환문을 생략하면 암묵적으로 undefined가 반환된다.
}

console.log(foo()); // undefined
```

- return 키워드와 반환값으로 사용할 표현식 사이에 줄바꿈이 있으면 세미콜론과 세미콜론 자동삽입기능에 의해 세미콜론이 추가되어 의도치 않은 결과가 나올 수 있다.

```jsx
function multiply(x, y) {

  return // 세미콜론 자동 삽입 기능에 의해 세미콜론이 추가된다.
  x * y; // 무시된다.
}

console.log(multiply(3, 5)); // undefined
```

- 반환문은 함수 몸체 내부에서만 사용할 수 있다.(전역에서 반환문을 사용하면 문법 에러가 발생)

```jsx
<!DOCTYPE html>
<html>
<body>
  <script>
    return; // SyntaxError: Illegal return statement
  </script>
</body>
</html>
```

# 12.6 참조에 의한 전달과 외부 상태의 변경

- 원시 값은 값에 의한 전달, 객체는 참조에 의한 전달 방식으로 동작
- 매개변수도 함수 몸체 내부에서 변수와 동일하게 취급되므로 매개변수 또한 타입에 따라 값에 의한 전달, 참조에 의한 전달 방식을 그대로 따른다.

```jsx
// 매개변수 primitive는 원시값을 전달받고, 매개변수 obj는 객체를 전달받는다.
function changeVal(primitive, obj) {
  primitive += 100;
  obj.name = 'Kim';
}

// 외부 상태
var num = 100;
var person = { name: 'Lee' };

console.log(num); // 100
console.log(person); // {name: "Lee"}

// 원시값은 값 자체가 복사되어 전달되고 객체는 참조값이 복사되어 전달된다.
changeVal(num, person);

// 원시값은 원본이 훼손되지 않는다.
console.log(num); // 100

// 객체는 원본이 훼손된다.
console.log(person); // {name: "Lee"}
```

- 원시 타입 인수를 전달받은 매개변수 primitive의 경우 원시값은 변경 불가능한 값이므로 재할당을 통해 할당된 원시 값을 새로운 원시값으로 교체
- 객체 타입 인수를 전달 받은 매개변수 obj인 경우 변경가능한 값이므로 직정 할당된 객체를 변경했다.

![Untitled](https://user-images.githubusercontent.com/75876669/207594257-34cbe5a9-e249-44b0-9a6b-5c983d84e5f4.png)

# 12.7 다양한 함수의 형태

## 12.7.1 즉시 실행 함수

- 함수 정의와 동시에 즉시 호출되는 함수
- 단 한 번만 호출되며 다시 호출할 수 없다.

```jsx
// 익명 즉시 실행 함수
(function () {
  var a = 3;
  var b = 5;
  return a * b;
}());
```

- 기명 즉시 실행 함수도 사용할 수 있지만 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 다시 호출할 수는 없다.

```jsx
// 기명 즉시 실행 함수
(function foo() {
  var a = 3;
  var b = 5;
  return a * b;
}());

foo(); // ReferenceError: foo is not defined
```

- 즉시 실행 함수는 그룹 연산자((…))로 감싸지 않으면 에러가 발생한다.

```jsx
function () { // SyntaxError
  // ...
}();
```

- 함수 정의가 함수 선언문의 형식에 맞지 않기 때문(함수 선언문은 함수 이름 생략 불가)

- 기명 함수를 정의해 그룹연산자 없이 즉시 호출

```jsx
function foo() {
  // ...
};
(); // SyntaxError: Unexpected token ')'
```

- 자바스크립트 엔진이 암묵적으로 수행하는 세미콜론 자동삽입 기능에 의해 함수 선언문이 끝나는 위치, 즉 함수 코드 블록의 닫는 중괄호 뒤에 ‘;’이 암묵적으로 추가되기 때문에 에러가 발생

- 즉 따라서 그룹 연산자로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서이다.

## 12.7.2 재귀함수

- 함수가 자기 자신을 호출하는 것(재귀 호출)

기존의 10 부터 0까지 출력하는 함수

```jsx
function countdown(n) {
	for (var i; i >= 0; i==) console.log(i);
}

countdown(10);
```

- 재귀 함수를 사용하는 경우

```jsx
var function countdown(n) {
  if (n < 0) return;
  console.log(n);
  countdown(n - 1); // 재귀 호출
}

countdown(10);
```

ex) 팩토리얼

```jsx
// 함수 표현식
function factorial(n) {
  // 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다.
  if (n <= 1) return 1;
  // 재귀 호출
  return n * factorial(n - 1);

};

console.log(factorial(0)); // 0! = 1
console.log(factorial(1)); // 1! = 1
console.log(factorial(2)); // 2! = 2 * 1 = 2
console.log(factorial(3)); // 3! = 3 * 2 * 1 = 6
console.log(factorial(4)); // 4! = 4 * 3 * 2 * 1 = 24
console.log(factorial(5)); // 5! = 5 * 4 * 3 * 2 * 1 = 120
```

![Untitled](https://user-images.githubusercontent.com/75876669/207594374-d5be5258-792e-4cc0-bf6e-2554a4b4b3bf.png)

```jsx
// 함수 표현식
var factorial = function foo(n) {
  // 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다.
  if (n <= 1) return 1;
  // 함수를 가리키는 식별자로 자기 자신을 재귀 호출
  return n * factorial(n - 1);

  // 함수 이름으로 자기 자신을 재귀 호출할 수도 있다.
  // console.log(factorial === foo); // true
  // return n * foo(n - 1);
};

console.log(factorial(5)); // 5! = 5 * 4 * 3 * 2 * 1 = 120
```

- 함수 표현식으로 정의한 함수 내부에서는 함수를 가리키는 식별자로도 자기 자신을 재귀호출할 수 있다.
- 단, 함수 외부에서 함수를 호출할 때는 식별자로 해야한다.

- 재귀함수는 자신을 무한 재귀 호출한다.
    
    → 재귀호출을 멈출 수 있는 탈출조건을 만들어야 한다.
    
    → 위의 경우에는 n이 1 이하일 때 재귀 호출을 멈춘다
    
    → 탈출 조건이 없을 경우 함수가 무한 호출되어 스택 오버플로에러가 발생한다.
    

## 12.7.3 중첩 함수

- 함수 내부에 정의된 함수(내부 함수)
- 중첩 함수를 포함하는 함수를 외부함수라 부른다
- 중첩 함수는 외부 함수 내부에서만 호출 가능

```jsx
function outer() {
  var x = 1;

  // 중첩 함수
  function inner() {
    var y = 2;
    // 외부 함수의 변수를 참조할 수 있다.
    console.log(x + y); // 3
  }

  inner();
}

outer();
```

## 12.7.4 콜백 함수

```jsx
// 외부에서 전달받은 f를 n만큼 반복 호출한다
function repeat(n, f) {
  for (var i = 0; i < n; i++) {
    f(i); // i를 전달하면서 f를 호출
  }
}

var logAll = function (i) {
  console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logAll); // 0 1 2 3 4

var logOdds = function (i) {
  if (i % 2) console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logOdds); // 1 3
```

- 콜백 함수 = 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수
- 고차 함수 = 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수
- 중첩 함수는 고정되어 있어서 교체하기 곤란하지만 콜백 함수는 함수 외부에서 고차 함수 내부로 주입하기 때문에 자유롭게 교체할 수 있다는 장점이 있다.

→ 고차 함수는 콜백 함수를 자신의 일부분으로 합성한다.

- 익명 함수의 경우 고차 함수의 인자에 콜백함수를 익명 함수 리터럴로 정의 하면서 곧바로 고차 함수에 전달하는 것이 일반적이다.

```jsx
// 익명 함수 리터럴을 콜백 함수로 고차 함수에 전달한다.
// 익명 함수 리터럴은 repeat 함수를 호출할 때마다 평가되어 함수 객체를 생성한다.
repeat(5, function (i) {
  if (i % 2) console.log(i);
}); // 1 3
```

- 콜백함수는 비동기 처리에도 활용되는 중요한 패턴이다

```jsx
// 콜백 함수를 사용한 이벤트 처리
// myButton 버튼을 클릭하면 콜백 함수를 실행한다.
document.getElementById('myButton').addEventListener('click', function () {
  console.log('button clicked!');
});

// 콜백 함수를 사용한 비동기 처리
// 1초 후에 메시지를 출력한다.
setTimeout(function () {
  console.log('1초 경과');
}, 1000);
```

## 12.7.5 순수 함수와 비순수 함수

- 순수 함수 : 외부 상태에 의존하지도 않고 변경하지도 않는, 즉 부수 효과가 없는 함수
- 비순수 함수 : 외부 상태에 의존하거나 외부 상태를 변경하는, 즉 부수효과가 있는 함수

- 순수함수는 어떤 외부 상태에도 의존하지 않고 오직 매개변수를 통해 내부로 전달된 인수에게만 의존해 값을 생성해 반환한다.(동일한 인수가 전달되면 언제나 동일한 값으로 반환한다.)
    
    →인수를 변경하지 않는 것이 기본 → 인수의 불변성을 유지
    
- 함수의 외부 상태를 변경하지 않는다.

```jsx
var count = 0; // 현재 카운트를 나타내는 상태

// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.
function increase(n) {
  return ++n;
}

// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
increase(count);
console.log(count); // 1

increase(count);
console.log(count); // 2
```

- 비순수함수는 외부 상태를 변경하는 부수효과가 있다.(외부 상태에 의존하거나 외부 상태를 변경한다.)

```jsx
var count = 0; // 현재 카운트를 나타내는 상태: increase 함수에 의해 변화한다.

// 비순수 함수
function increase() {
  return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.
}

// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.
increase();
console.log(count); // 1

increase();
console.log(count); // 2
```

- 비순수 함수를 사용하면 상태 변화를 추적하기 어려워 진다. → 코드의 복잡성 증가
    
    → 비순수 함수를 최대한 줄이는 것이 부수 효과를 최대한 억제하는것