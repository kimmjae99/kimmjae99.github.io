---
layout: post
title:  모던자바스크립트 Deep Dive 23장
date:   2022-08-09 10:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

# 23장 실행 컨텍스트

---

- 자바스크립트의 동작 원리를 담고 있는 핵심 개념

# 23.1 소스코드의 타입

- 전역 코드(global code) : 전역에 존재하는 소스코드. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.
- 함수 코드(function code) : 함수 내부에 존재하는 소스코드. 함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.
- eval 코드(eval code) : 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드
- 모듈 코드(module code) : 모듈 대부에 존재하는 소스코드. 모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.

### 1. 전역 코드

- 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.
- var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다.
- 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.

### 2. 함수 코드

- 지역 스코프를 생성하고 지역 변수, 매개변수, arguments 객체를 관리해야 한다.
- 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다.
- 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.

### 3. eval 코드

- strict mode에서 자신만의 독자적인 스코프를 생성한다.
- 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 생성된다.

### 4. 모듈 코드

- 모듈별로 독립적인 모듈 스코프를 생성한다.
- 이를 위해 모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207605338-479eabdd-102a-442e-b1c3-0622e3f3f97e.png)

# 23.2 소스코드의 평가와 실행

- 모든 소스코드는 실행에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 한다.
    
    → 자바스크립트 엔진은 소스코드의 평가와 소스코드의 실행 과정으로 나누어 처리한다.
    

- 소스코드 평가 과정
- 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문만 먼저 실행하여 생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경레코드)에 등록한다.

- 소스코드 실행 과정
- 소스코드 평가 과정이 끝나면 선언문을 제외한 소스코드가 순차적으로 실행되기 시작한다.(런타임 시작)
- 이때 소스코드 실행에 필요한 정보, 즉 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.
- 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207605414-3209624b-6272-439a-8102-ddfd40358339.png)

```jsx
var x;
x = 1;
```

### 소스코드 평가 과정

- 변수 선언문 var x;를 먼저 실행된다.
- 이때 생성된 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207605580-91a4c084-30ef-4cee-9c5a-9302ce03ba56.png)

### 소스코드 실행 과정

- 변수 선언문 var x;는 소스코드 평가과정에서 이미 실행이 완료되었다
- 변수 할당문 x = 1;만 실행된다
- 이때 x 변수에 값을 할당하려면 먼저 x 변수가 선언된 변수인지 확인해야 한다.
- 이를 위해 실행 컨텍스트가 관리하는 스코프에 x 변수가 등록되어 있는지 확인한다.(x 변수가 선언되었는지)
- x 변수가 실행 컨텍스트가 관리하는 스코프에 등록되어 있다면 x 변수는 선언된 변수, 즉 소스코드 평가 과정에서 선언문이 실행되어 등록된 변수다.
- x 변수가 선언된 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207605656-3de33ad4-5498-463b-9873-8ee2c117a1ec.png)

# 23.3 실행 컨텍스트의 역할

```jsx
// 전역 변수 선언
const x = 1;
const y = 2;

// 함수 정의
function foo(a) {
  // 지역 변수 선언
  const x = 10;
  const y = 20;

	// 메서드 호출
  console.log(a + x + y); // 130
}

// 함수 호출
foo(100);

// 메서드 호출
console.log(x + y); // 3
```

### 1. 전역코드 평가

- 전역 코드를 실행하기 위한 준비
- 선언문만 먼저 실행
    
    →전역 코드의 변수 선언문과 함수 선언문이 먼저 실행되고 그 결과 생성된 전역 변수와 전역 함수가 실행 컨텍스트가 관리하는 전역 스코프에 등록된다.
    
    - 이때 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 된다.

### 2. 전역 코드 실행

- 런타임이 시작되어 전역 코드가 순차적으로 실행되기 시작한다.
- 이때 전역 변수에 값이 할당되고 함수가 호출된다.
- 함수가 호출되면 순차적으로 실행되던 전역 코드의 실행을 일시 중단하고 코드 실행 순서를 변경하여 함수 내부로 진입한다.

### 3. 함수 코드 평가

- 함수 호출에 의해 코드 실행 순서가 변경되어 함수 내부로 진입하면 함수 내부의 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위하 준비를 한다.
- 이때 매개변수와 지역 변수 선언문이 먼저 실행되고 그 결과 생성된 매개변수와 지역 변수가 실행 컨텍스트가 관리하는 지역 스코프에 등록된다.
- 또한 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.

### 4. 함수 코드 실행

- 함수 코드 평가 과정이 끝나면 런타임이 시작되어 함수 코드가 순차적으로 실행되기 시작한다.
- 스코프를 구분하여 식별자와 바인딩된 값이 관리되어야 한다.
- 중첩 관계에 의해 스코프 체인을 형성하여 식별자를 검색할 수 있어야 하고, 전역 객체의 프로퍼티도 전역 변수처럼 검색할 수 있어야 한다.
- 함수 호출이 종료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행 중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다.
- **코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서등의 관리가 필요하다.**
    - 선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태변화(식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.
    - 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색할 수 있어야 한다.
    - 현재 실행 중인 코드의 실행 순서를 변경(예를 들어, 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.

- 이 모든 것을 관리하는 것이 실행 컨텍스트다.
- 실행 컨택스트 : 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역

→식별자(변수, 함수, 클래스 등의 이름)를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.

- 식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고 코드 실행 순서는 **실행 컨텍스트 스택**으로 관리한다.

# 23.4 실행 컨텍스트 스택

```jsx
const x = 1;

function foo () {
  const y = 2;

  function bar () {
    const z = 3;
    console.log(x + y + z);
  }
  bar();
}

foo(); // 6
```

- 위 예제는 전역 코드와 함수 코드로 이루어져 있다.
- 자바스크립트엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다. 그리고 함수가 호출되면 함수 코드를 펴아하여 함수 실행 컨텍스트를 생성한다.
- 이때 생성된 실행 컨텍스트는 스택 자료구조로 관리된다. 이를 실행 컨텍스트 스택이라고 부른다.
- 코드를 실행하면 코드가 실행되는 시간의 흐름에 따라 실행 컨텍스트 스택에는 실행 컨텍스트가 추가(push)되고 제거(pop)된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207605778-98f264fc-c8fa-4edd-9f80-b36d79b3cd1f.png)

### 1. 전역 코드의 평가와 실행

- 전역코드를 평가하여 전역 실행 컨텍스트를 생성하고 실행 컨택스트에 push한다.
- 이때 전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다.
- 이후 전역 코드가 실행되기 시작하여 전역 변수 x에 갑이 할당되고 전역 함수 foo가 호출된다.

### 2. foo 함수 코드의 평가와 실행

- foo가 호출되면 전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동한다.
- foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 push한다.
- 이때 foo 함수의 지역 변수 y 와 중첩 함수 bar가 foo함수 실행 컨텍스트에 등록된다.
- 이후 foo 함수 코드가 실행되기 시작하여 지역 변수 y에 값이 할당되고 중첩 함수 bar가 호출된다.

### 3. bar 함수 코드의 평가와 실행

- 중첩함수 bar가 호출되면 foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar 함수 내부로 이동한다.
- bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 push한다.
- 이때 bar 함수의 지역 변수 z가 bar함수 실행 컨텍스트에 등록된다.
- 이후 bar 함수 코드가 실행되기 시작하여 지역 변수 z에 값이 할당되고 console.log 메서드를 호출한 이후, bar 함수는 종료된다.

### 4. foo 함수 코드로 복귀

- bar 함수가 종료되면 코드의 제어권은 다시 foo 함수로 이동한다.
- 이때 bar 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 pop하여 제거한다.
- 그리고 foo 함수는 더이상 실행할 코드가 없으므로 종료된다.

### 5. 전역 코드로 복귀

- foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동한다.
- 이때 foo 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 pop하여 제거한다.
- 그리고 더이상 실행할 전역 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 실행 컨텍스트에서 pop되어 실행 컨텍스트 스택에는 아무것도 남아있지 않게 된다.

- 이처럼 **실행 컨텍스트 스택은 코드의 실행 순서를 관리**한다.
- 소스코드가 평가되면 실행 컨텍스트가 생성되고 실행 컨텍스트 스택의 최상위에 쌓인다.

→**실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트다.**

→ 따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 **실행 중인 실행 컨텍스트**라 부른다.

# 23.5 렉시컬 환경

- 렉시컬 환경 : 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 켄텍스트를 구성하는 컴포넌트
- 실행 컨텍스트 스택 → 코드의 실행 순서를 관리
- 렉시컬 환경 → 스코프와 식별자를 관리

![Untitled](https://user-images.githubusercontent.com/75876669/207605920-97312d23-da0a-4357-9c16-a3f7ae313471.png)

- 키와 값을 갖는 객체 형태의 스코프(전역, 함수, 블록 스코프)를 생성하여 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리한다.
    
    →즉, 렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.
    

- 실행 컨텍스트는 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트로 구성된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606031-a4141cfe-8b58-4d29-8de8-693773c0f56f.png)

- 생성초기에 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트는 하나의 동일한 렉시컬 환경을 참조한다.
- 이후 몇가지 상황을 만나면 VariableEnvironment 컴포넌트를 위한 새로운 렉시컬 환경을 생성하고 이때부터  LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트는 내용이 달라지는 경우도 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606120-7ec0fca4-299d-4eed-af2c-778ea384a176.png)

- 환경 레코드(Environment Record)
- 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소
- 환경 레코드는 소스코드의 타입에 따라 관리하는 내용에 차이가 있다.

- 외부 렉시컬 환경에 대한 참조(Outer Lexical Environment Reference)
- 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.
- 이때 상위 스코프란 외부 렉시컬 환경, 즉 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다.
- 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.

# 23.6 실행 컨텍스트의 생성과 식별자 검색 과정

```jsx
var x = 1;
const y = 2;

function foo (a) {
  var x = 3;
  const y = 4;

  function bar (b) {
    const z = 5;
    console.log(a + b + x + y + z);
}
  bar(10);
}

foo(20); // 42
```

## 23.6.1 전역 객체 생성

- 전역 객체는 전역 코드가 평가되기 이전에 생성
- 전역 객체에는 빌트인 전역 프로퍼티와 빌트인 전역 함수, 그리고 표준 빌트인 객체가 추가되면 동작 환경에 따라 클라이언트 사이드 Web API 또는 특정 환경을 위한 호스트 객체를 포함한다.
- 전역 객체도 Object,prototype을 상속 받는다.(전역 객체도 프로토타입 체인의 일원이다.)

```jsx
// Object.prototype.toString
window.toString(); // -> "[object Window]"

window.__proto__.__proto__.__proto__.__proto__ === Object.prototype; // -> true
```

## 23.6.2 전역 코드 평가

- 전역 실행 컨텍스트 생성
- 전역 렉시컬 환경 생성
    - 전역 환경 레코드 생성
        - 객체 환경 레코드 생성
        - 선언적 환경 레코드 생성
    - this 바인딩
    - 외부 렉시컬 환경에 대한 참조 결정

- 위 과정을 거쳐 생성된 전역 실행 컨텍스트와 렉시컬 환경

![Untitled](https://user-images.githubusercontent.com/75876669/207606211-81aa3431-2c09-40d1-9996-2430a8c3911a.png)

### 1. 전역 실행 컨텍스트 생성

- 비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트 스텍에 push한다.
- 이때 전역 실행 컨텍스트는 실행 컨텍스트의 최상위, 즉 실행 중인 실행 컨텍스트가 된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606334-750883fd-fcd0-4b5e-9b2c-cf0775924ab8.png)

### 2. 전역 렉시컬 환경 생성

- 전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606430-fcc8312c-8678-49ef-a0ff-8235c37b0711.png)

- 렉시컬 환경은 환경레코드와 외부 렉시컬에대한 참조로 구성

### 2.1 전역 환경 레코드 생성

- 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공

- ES6 이전에는 전역 객체가 전역 환경 레코드의 역할을 수행했다.
- 하지만 ES6의 let, const 키워드로 선언한 지역 변수는 전역 객체의 프로퍼티가 되지 않고 개념적인 블록내에 존재하게 된다.
- 이처럼 var키워드로 선언한 전역변수와 let, const 키워드로 선언한 전역벽수를 구분하여 관리하기 위해 전역 스코프 역할을 하는 전역 환경 레코드는 객체환경 레코드와 선언적 환경 레코드로 구성되어 있다.

- 객체 환경 레코드
- 기존의 전역 객체가 관리하던 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 관리한다.
- 선언적 환경 레코드
- let, const 키워드로 선언한 전역변수를 관리한다.

- 객체 환경 레코드와 선언적 환경 레코드는 서로 협력하여 전역 스코프와 전역 객체를 관리한다.

### 2.1.1 객체 환경 레코드 생성

- BindingObject라고 부르는 객체와 연결된다.(**BindingObject는 전역 객체 생성에서 생성된 전역 객체이다.**)
- **전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.**
- 등록된 식별자를 객체 환경 레코드에서 검색하면 전역 객체의 프로퍼티를 검색하여 반환한다.
- 이것이 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수가 전역 객체의 프로퍼티와 메서드가 되고 전역 객체를 가리키는 식별자(window) 없이 전역 객체의 프로퍼티를 참조 할 수 있는 메커니즘이다.
- 위 예제의 전역 변수 x와 전역 함수 foo는 객체환경 레코드를 통해 객체 환경 레코드의 BindingObject에 바인딩되어 있는 전역 객체의 프로퍼티와 메서드가 된다.

```jsx
var x = 1;
const y = 2;

function foo (a) {
...
```

![Untitled](https://user-images.githubusercontent.com/75876669/207606615-a9ed3be8-9ffe-4348-a770-942789ab5607.png)

- x 변수는 var 키워드로 선언한 변수다.
- 따라서 “선언 단계”와 “초기화 단계”가 동시에 진행된다.

→ 전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 변수 식별자를 키로 등록한 다음, 암묵적으로 undefined를 바인딩한다.

- 따라서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다.
- 변수 선언문 이전에 참조한 변수의 값은 언제나 undefined다.
- var 키워드로 선언한 변수에 할당한 함수 표현식도 이와 동일하게 동작한다.

→ 이것이 변수 호이스팅이 발생하는 원인이다.

- 함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당한다.
- 이것이 변수 호이스팅와 함수 호이스팅의 차이다.
- 즉, 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.

### 2.1.2. 선언적 환경 레코드 생성

- var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 전역 함수 이외의 선언, 즉 let, const키워드로 선언한 전역 변수(let, const 키워드로 선언한 변수에 할당한 함수 표현식 포함)는 선언적 환경 레코드에 등록되고 관리된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606741-8d1c5f34-ab6d-4143-a2c5-a83e4acc9e1b.png)

- let, const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지 않고 개념적인 블록 내에 존재하게 된다고 하는데 여기서 개념적인 블록이 바로 전역 환경 레코드의 선언적 환경 레코드이다.
- 따라서 위 예제의 전역 변수 y는 let, const 키워드로 선성한 변수이므로 전역 객체의 프로퍼티가 되지 않기 때문에 window.y와 같이 전역 객체의 프로퍼티로서 참조할 수 없다.
- 또한 const 키워드로 선언한 변수는 선언단계와 초기화 단계가 분리되어 진행한다.
- 따라서 초기화 단계, 즉 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 **일시적 사각지대**에 빠지게 된다.
- 위 그램에서 y 변수에 바인딩되어 있는 <uninintialized>는 초기화 단계가 진행되지 않아 변수에 접근할 수 없음을 나타내기 위해 사용한 표현이다.(실제로 값이 바인딩 된 것이 아니다.

- let, const 키워드로 선언한 변수도 변수 호이스팅이 발생하는 것은 변함이 없다.
- 단 let, const 키워드로 선언한 변수는 런타임에 컨트롤이 변수 선언문에 도달하기 전까지 일시적 사각지대에 빠지기 때문에 참조할 수 없다.

```jsx
let foo = 1; // 전역 변수

{
  // let, const 키워드로 선언한 변수가 호이스팅되지 않는다면 전역 변수를 참조해야 한다.
  // 하지만 let 키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에 참조 에러(ReferenceError)가 발생한다.
  console.log(foo); // ReferenceError: Cannot access 'foo' before initialization
  let foo = 2; // 지역 변수
}
```

### 2.2. this 바인딩

- 전역 환경 레코드의 [[GlobalThis Value]] 내부 슬롯에 this가 바인딩된다.
- 일반적으로 전역 코드에서 this는 전역 객체를 가리키므로 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에는 전역 객체가 바인딩된다.
- 전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 바인딩되어있는 객체가 반환된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207606862-04187de9-6aad-4ad8-910f-34535fbbecf8.png)

- 참고로 전역 환경 레코드를 구성하는 객체 환경 레코드와 선언적 환경 레코드에는 this 바인딩이 없다. this 바인딩은 전역 환경 레코드와 함수 환경 레코드에만 존재한다.

### 2.3 외부 렉시컬 환경에 대한 참조 결정

- 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.
- 이를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.

- 현재 평가중인 소스코드는 전역 코드다.
- 전역 코드를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다.
    
    → 전역 렉시컬 환경이 스코프 체인의 종점에 존재함을 의미한다.
    

![Untitled](https://user-images.githubusercontent.com/75876669/207606998-0201bf1b-1cf3-4b80-99be-90a0006e9991.png)

## 23.6.3 전역 코드 실행

- 전역 코드가 순차적으로 실행 되기 시작한다.
- 변수 할당문이 실행되어 전역 변수 x, y에 값이 할당된다.
- 그리고 foo 함수가 호출된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607066-efd99d93-e35e-4d81-aae9-1701a62c8fe4.png)

- 변수 할당문 또는 함수 호출문을 실행하려면 먼저 변수 또는 함수의 이름이 선언된 식별자 인지 확인해야한다.
- 또한 식별자는 스코프가 다르면 같은 이름을 가질 수 있다.(동일한 이름의 식별자가 다른 스코프에 여러 개 존재 할 수 있다.)
- 어느 스코프의 식별자를 참조하면 되는지 결정할 필요가 있다. → 식별자 결정
- 식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색하기 시작한다.
- 선언된 식별자는 실행 컨텍스트의 렉시컬 환경 레코드에 등록되어 있다.

- 현재 실행중인 실행 컨텍스트는 전역 실행컨텍스트이므로 전역 렉시컬 환경에서 식별자 x, y, foo를 검색하기 시작한다.
- 실행중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬환경, 즉 상위 스코프로 이동하여 식별자를 검색한다.
- 이것이 바로 스코프체인의 동작원리이다.

## 23.6.4 foo 함수 코드 평가

```jsx
var x = 1;
const y = 2;

function foo (a) {
  var x = 3;
  const y = 4;

  function bar (b) {
    const z = 5;
    console.log(a + b + x + y + z);
}
  bar(10);
}

foo(20); // ← 호출 직전
```

- foo 함수가 호출되면 전역 코드의 실행을 일시 중단하고 foo 함수 내부로 코드의 제어권이 이동한다.
- 그리고 함수 코드를 평가하기 시작한다.

- 함수 실행 컨텍스트 생성
- 함수 렉시컬 환경 생성
    - 함수 환경 레코드 생성
    - this 바인딩
    - 외부 렉시컬 환경에 대한 참조 결정

위 과정을 거쳐 생성된 foo 함수 실행 컨텍스트와 렉시컬 환경

![Untitled](https://user-images.githubusercontent.com/75876669/207607139-aaa74434-f279-4a41-bab7-44952821fdbb.png)

### 1. 함수 실행 컨텍스트 생성

- foo 함수 실행 컨텍스트를 생성
- 생성된 함수 실행 컨텍스트는 함수 렉시컬 환경이 완성된 다음 실행 컨텍스트 스택에 push된다.
- 이때 foo 함수 실행 컨텍스트는 실행 컨텍스트 스택의 최상위, 즉 실행 중인 실행 컨텍스트가 된다.

### 2. 함수 렉시컬 환경 생성

- foo 함수 렉시컬 환경을 생성하고 foo 함수 실행 컨텍스트에 바인딩한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607240-e3af51ac-c35b-4b4e-a88f-bdc2a3e5dc17.png)

- 렉시컬환경은 2개의 컴포넌트, 즉 환경 레코드와 외부 렉시컬 환경에 대한 참조로 구성된다.

### 2.1 함수 환경 레코드 생성

- 함수 환경 레코드는 매개변수,  arguments 객체, 함수 내부에서 선언한 지역변수와 중첩함수를 등록하고 관리한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607301-ba417006-7362-435f-a291-3baaf5dbb420.png)

### 2.2 this 바인딩

- 함수 환경 레코드의 [[ThisValue]] 내부슬롯에 this가 바인딩된다. [[ThisValue]] 내부슬롯에 바인딩될 객체는 함수 호출 방식에 따라 결정된다.
- foo 함수는 일반함수로 호출되었으므로 this는 전역 객체를 가리킨다.
- 따라서 함수 환경 레코드의 [[ThisValue]] 내부슬롯에는 전역 객체가 바인딩된다.
- foo 함수 내부에서 this를 참조하면 함수 환경 레코드의 [[ThisValue]] 내부슬롯에 바인딩되어 있는 객체가 반환한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607452-8fff5985-d5be-4773-9c76-562068379ce7.png)

### 2.3 외부 렉시컬 환경에 대한 참조 결정

- 외부 렉시컬 환경에 대한 참조에 foo 함수 정의가 평가된 시점에 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 할당된다.
- foo 함수는 전역 코드에 정의된 전역 함수다. 따라서 foo 함수 정의는 전역 코드 평가 시점에 평가된다.
- 이 시점의 실행 중인 실행 컨텍스트는 전역 실행 컨텍스트다.
- 따라서 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607545-8a49314f-50d7-4e2c-a483-f2604fe55bfb.png)

- 자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 따라 상위 스코프를 결정한다고 했다. 그리고 함수 객체는 자신이 정의된 스코프, 즉 상위 스코프를 기억한다.
- 자바스크립트 엔진은 함수의 상위 스코프를 함수 객체의 내부 슬롯 [[Environment]]에 저장한다.
- 함수 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 할당되는 것을 바로 함수의 상위 스코프를 가리키는 함수 객체의 내부 슬롯 [[Environment]]에 저장된 렉시컬 환경의 참조다.
- 즉, 함수 객체의 내부 슬롯 [[Environment]]가 바로 렉시컬 스코프를 구현하는 메커니즘이다.

## 23.6.5 foo 함수 코드 실행

- 이제 런타임이 시작되어 foo 함수의 소스코드가 순차적으로 실행되기 시작한다.
- 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역변수 x, y에 값이 할당된다.
- 그리고 함수 bar가 호출된다.
- 이때 식별자 결정을 위해 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색하기 시작한다.
- 현재 실행중인 실행 컨텍스트는 foo 함수 실행 컨텍스트이므로 foo 함수 렉시컬 환경에서 식별자 x, y를 검색하기 시작한다.
- 만약 실행중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경으로 이동하여 식별자를 검색한다.
- 이렇게 검색된 식별자에 값을 바인딩한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607607-a7c2baea-b63f-4f15-81dd-74cd10c49b9e.png)

## 23.6.6 bar 함수 코드 평가

```jsx
var x = 1;
const y = 2;

function foo (a) {
  var x = 3;
  const y = 4;

  function bar (b) {
    const z = 5;
    console.log(a + b + x + y + z);
  }
  bar(10); // ← 호출 직전
}

foo(20);
```

- bar 함수가 호출되면 bar 함수 내부로 코드의 제어권이 이동한다.
- 그리고 함수 코드를 평가하기 시작한다.
- 실행컨텍스트와 렉시컬 환경의 생성과정은 foo 함수 코드 평가때와 동일하다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607711-67d7c531-7e4b-48a3-ab3c-ee87d8b72e57.png)

## 23.6.7 bar 함수 코드 실행

- 이제 런타임이 시작되어 bar 함수의 소스코드가 순차적으로 실행되기 시작한다.
- 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 z에 값이 할당된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607786-58bfbae2-367d-48c1-953f-5ffae22d6144.png)

- 그리고 console.log가 실행된다.

### 1. console 식별자 검색

- console 식별자를 스코프 체인에서 검색한다.
- 식별자를 검색할 때는 언제나 현재 실행 중인 컨텍스트의 렉시컬 환경에서 검색하기 시작한다.

- 실행중인 실행 컨텍스트는 bar 함수 실행 컨텍스트다.
- 따라서 bar 함수 실행 컨텍스트의 bar 함수 렉시컬 환경에서 console 식별자를 검색한다.
- 이곳에는 console 식별자가 없으므로 상위 스코프인 foo 함수 렉시컬 환경으로 이동하여 검색한다.
- 이곳에도 없으므로 전역 렉시컬 환경으로 이동하여 console 식별자를 검색한다.
- 전역 렉시컬 환경은 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있는데 console식별자는 객체환경레코드의 BindingObject를 통해 전역객체에서 찾을 수 있다.

### 2. log 메서드 검색

- console 객체에서 log 메서드를 검색하낟.
- 이때 console 객체의  프로토타입 체인을 통해 메서드를 검색한다.
- log 메서드는 상속된 프로퍼티가 아니라 console 객체가 직접 소유하는 프로퍼티다.

### 3. 표현식 a + b + x + y + z의 평가

- 이제 표현식을 평가하기 위해 a, b, x, y ,z 식별자를 검색한다.
- 식별자는 스코프 체인, 즉 현재 실행 중인 실행 컨텍스트의 렉시컬 환경에서 시작하여 외부 렉시컬 환경에 대한 참조로 이어지는 렉시컬 환경의 연속에서검색한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607915-c10f2069-ce01-4a75-891c-8c5393bd6661.png)

### 4. console.log 메서드 호출

- 표현식이 평가되어 생성된 값을 console.log 메서드에 전달하여 호출한다.

## 23.6.8 bar 함수 코드 실행 종료

- console.log 메서드가 호출되고 종료하면 더는 실행할 코드가 없으므로 bar 함수 코드의 실행이 종료된다.
- 이때 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 pop되어 제거되고 foo 실행 컨텍스트가 실행중인 실행 컨텍스트가 된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207607993-9c3fdbf8-c507-4279-9831-3550abb42899.png)

- 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 제거 되었다고 해서 bar 함수 렉시컬 환경까지 즉시 소멸하는 것은아니다.
- 렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체다.
- 객체를 포함한 모든 값이 참조되지 않을 때 비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸한다.

## 23.6.9  foo 함수 코드 실행 종료

- bar 함수가 종료하면 더이상 실행 할 코드가 없으므로 foo 함수 코드의 실행이 종료된다.
- 이때  실행 컨텍스트 스택에서 foo 함수 실행 컨텍스트가 pop되어 제거되고 전역 실행 컨텍스트가 실행중인 실행 컨텍스트가 된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207608109-b3af862a-74ce-4fc7-9129-664af9a5dcb3.png)

## 23.6.10 전역 코드 실행 종료

- foo 함수가 종료하면 더이상 실행 할 코드가 없으므로 전역 코드의 실행이 종료된다.
- 전역 실행 컨텍스트도 실행 컨텍스트 스택에서 pop 되어 실행 컨텍스트 스택에는 아무것도 남아있지 않게 된다.

# 23.7 실행 컨텍스트와 블록 레벨 스코프

- var 키워드로 선언한 변수는 함수의 코드 블록만 지역 스코프로 인정하는 함수 레벨 스코프를 따른다.
- 하지만 let, const 키워드로 선언한 변수는 모든 코드 블록(함수, if문, for문, while문, try/catch문)을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.

```jsx
let x = 1;

if (true) {
  let x = 10;
  console.log(x); // 10
}

console.log(x); // 1
```

- if문의 코드 블록 내에서 let 키워드로 변수가 선언되었다.
- 따라서 if문의 코드 블록이 실행되면 if문의 코드 블록을 위한 블록 레벨 스코프를 생성해야한다
- 이를 위해 선언적 환경 레코드를 갖는 렉시컬환경을 새롭게 생성하여 기존의 전역 렉시컬 환경을 교체한다.
- 이렇게 생서오딘 if문의 코드 블록을 위한 렉시컬 환경의 외부 렉시컬 환경에 대한 참조는 전역 렉시컬 환경을 가리킨다.

![Untitled](https://user-images.githubusercontent.com/75876669/207608214-a3c8478d-60f9-404a-bdc5-ac9dfe4be9ed.png)

- if문 코드 블록의 실행이 종료되면 if 문의 코드 블록이 실행되기 이전의 렉시컬 환경으로 되돌린다.

![Untitled](https://user-images.githubusercontent.com/75876669/207608295-db16946a-f5a4-46ba-9b34-fabbe28f3bf1.png)

- 이는 if 문뿐 아니라 블록 레벨 스코프를 생성하는 모든 블록문에 적용된다.