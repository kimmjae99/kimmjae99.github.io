---
layout: post
title:  모던자바스크립트 Deep Dive 8장~11장
date:   2022-07-12 15:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

---

# 8장 제어문

---

- 제어문은 조건에 따라 코드 블록을 실행(조건문)하거나 반복 실행(반복문)할 때 사용한다.
- 제어문을 사용하면 코드의 실행 흐름을 인위적으로 제어할 수 있다.
- 단점 : 코드의 흐름을 이해하기 어렵게 만들어 가독성을 햊치는 단점이 있다.

       (가독성이 좋지 않은 코드는 오류를 발생시키는 원인이 된다.)

→ forEach, map, filter, reduce 같은 고차 함수를 사용한 함수형 프로그래밍 기법에서는 제어문의 사용을 억제하여 복잡성을 해결하려고 노력한다.

# 8.1 블록문

- 블록문은 0개 이상의 문을 중괄호로 묶은 것(코드 블록 또는 블록이라고 불린다.)
- 자바스크립트는 블록문 하나의 실행 단위로 취급한다.
- 일반적으로 제어문이나 함수를 정의할 때 사용하는 것이 일반적이다.

블록문이 사용되는 예제

```jsx
//블록문
{
	var foo = 10;
}
//제어문
var x = 1;
if(x < 10) {
	x++;
}
//함수 선언문
function sum(a, b) {
	return a + b;
}
```

# 8.2 조건문

- 조건문은 주어진 조건식의 평가 결과에 따라 코드 블록(블록문)의 실행을 결정한다.
- 조건식은 불리언 값으로 평가될 수 있는 표현식이다.
- if…else, switch

## 8.2.1 if…else문

- 주어진 조건식의 평가결과(참, 거짓)에 따라 실행할 코드 블록을 결정한다.
- 조건식의 평가 결과가 true일 경우 if 문의 코드 블록이 실행된다.
- 조건식의 평가 결과가 false일 경우 else 문의 코드 블록이 실행된다.

```jsx
if(조건식){
	//조건식이 참이면 이 코드 블록이 실행된다.
} else {
	//조건식이 거짓이면 이 코드 블록이 실행된다.
}
```

```jsx
if(조건식1) {
	//조건식1이 참이면 이 코드 블록이 실행된다.
} else if(조건식2) {
	//조건식2가 참이면 이 코드 블록이 실행된다.
} else {
	//조건식1과 조건식2가 모두 거짓이면 이 코드 블록이 실행된다.
}
```

- else if문과 else문은 옵션(사용해도 되고 사용하지 않아도 됨)
- if문과 else문은 2번 이상 사용할 수 없음(else if문은 여려번 사용가능)

```jsx
var num = 2;
var kind;

//if문
if(num > 0) {
	kind = '양수'; // 음수를 구별할 수 없다.
}
console.log(kind); // 양수

//if...else문
if(num > 0) {
	kind = '양수';
} else {
	kind = '음수'; // 0은 음수가 아니다.
}
console.log(kind); // 양수

//if...else if문
if(num > 0) {
	kind = '양수';
} else if(num < 0) {
	kind = '음수'; 
} else {
	kind = '0';
}
console.log(kind); // 양수

```

- 코드 블록 내의 문이 하나뿐이라면 중괄호를 생략할 수 있다.

```jsx
var num = 2;
var kind;

if(num > 0)      kind = '양수';
else if(num < 0) kind = '음수';
else             kind = '0';

console.log(kind); // 양수
```

- if…else문을 삼항 조건 연산자로  바꿔 쓸 수 있다.

```jsx
var x = 2;
var result;

if(x % 2) { // 2 % 2는 0이다. 이때 0은 false로 암묵적 강제 변환된다.
	result = '홀수'; //조건식 값이 1일때
} else {
	result = '짝수'; //조건식 값이 0일때
}

console.log(result); // 짝수
```

```jsx
// 경우의 수가 2가지인 경우 ex) 짝수, 홀수
var x = 2;

//0은 false로 취급된다.
var result = x % 2 ? '홀수' : '짝수'; // 삼항 조건 연산자
console.log(result); // 짝수
```

```jsx
// 경우의 수가 세가지인 경우 ex) 양수, 음수, 0      참고 : 0이 아닌 수는 참
var num = 2;

var kind = num ? (num > 0 ? '양수' : '음수') : '영';

console.log(kind); //양수
```

## 8.2.2 switch 문

- 주어진 표현식을 평가하여 그 값과 일치하는 표현식을 갖는 case문으로 실행 흐름을 옮긴다.
- case문은 상황을 의미하는 표현식을 지정하고 콜론으로 마친다. ex) case … :
- 그 뒤에 실행할 문들을 위치시킨다.
- switch문의 표현식과 일치하는 case 문이 없다면 실행 순서는 default 문으로 이동한다.

      (default문은 선택사항)

```jsx
switch (표현식) {
	case 표현식1:
		switch문의 표현식과 표현식1이 일치하면 실행될 문;
		break;
	case 표현식2:
		switch문의 표현식과 표현식2가 일치하면 실행될 문;
		break;
	default:
		switch문의 표현식과 일치하는 case문이 없을 때 실행될 문;
}
```

- if…else문의 조건식은 주로 불리언 값으로 평가됨
- switch문의 표현식은 불리언 값보다는 문자열이나 숫자 값인 경우가 많음

```jsx
//월을 영어로 변환한다.
var month = 11;
var monthName;

switch (month){
	case 1: monthName = 'January';
	case 2: monthName = 'February';
	case 3: monthName = 'March';
	case 4: monthName = 'April';
	case 5: monthName = 'May';
	case 6: monthName = 'June';
	case 7: monthName = 'July';
	case 8: monthName = 'August';
	case 9: monthName = 'September';
	case 10: monthName = 'October';
	case 11: monthName = 'Nobember';
	case 12: monthName = 'December';
	default: monthName = 'Invalid month';
}

console.log(monthName); // Invalid month
```

- 위의 예제를 실행 해보면 Invalid month가 나온다.
    
    → switch문의 표현식의 평가결과와 일치하는 case문으로 실행흐름이 이동해서 실행이 됐지만 문을 실행한 수 탈출하지 않고 계속 진행되었기 때문
    
    - 모든 case문과 default문이 다 실행된 것을 **폴스루(fall through)**라 한다.

```jsx
var month = 11;
var monthName;

switch (month){
	case 1: monthName = 'January';
		break;
	case 2: monthName = 'February';
		break;
	case 3: monthName = 'March';
		break;
	case 4: monthName = 'April';
		break;
	case 5: monthName = 'May';
		break;
	case 6: monthName = 'June';
		break;
	case 7: monthName = 'July';
		break;
	case 8: monthName = 'August';
		break;
	case 9: monthName = 'September';
		break;
	case 10: monthName = 'October';
		break;
	case 11: monthName = 'Nobember';
		break;
	case 12: monthName = 'December';
		break;
	default: monthName = 'Invalid month';
}

console.log(monthName); // Nobember
```

- default문에서는 break를 생략하는 것이 일반적
    
    → default문은 switch문의 맨 마지막에 위치하므로 별도의 break문이 필요 없다.
    

- break문을 생략한 폴스루가 유용한 경우도 있다.

```jsx
var year = 2022;
var month = 3;
var days = 0;

switch (month) {
	case 1: case 3: case 5: case 7: case 8: case 10: case 12:
		days = 31;
		break;
	case 2: case 4 : case 6: case 9: case 11:
		days = 30;
		break;
}

console.log(days); // 31
```

- C언어를 기반으로 하는 프로그래밍 언어는 switch 문을 지원하지만 파이썬과 같이 switch문을 지원하지 않는 프로그래밍 언어도 있다.

# 8.3 반복문

- 반복문은 조건식의 평가 결과가 참인 경우 코드 블록을 실행한다.
- 코드 블록을 실행한 후 조건식을 다시 평가하여 여전히 참인 경우 코드 블록을 다시 실행한다.
- 조건식이 거짓일 때까지 반복된다.
- for문, while문, do…while문

- 반복문을 대체할 수 있는 다양한 기능(각각 해당 장에서 살펴볼 것)
    - 배열을 순회할 때 사용하는 forEach 메서드
    - 객체의 프로퍼티를 열거할 때 사용하는 for…in문
    - 이터러블을 순회할 수 있는 for…of문

## 8.3.1 for 문

- for문은 조건식이 거짓으로 평가될 때까지 코드블록을 반복 실행한다.

```jsx
for(변수 선언문 또는 할당문; 조건식; 증감식){
	조건식이 참인 경우 반복 실행될 문;
}
```

예제

```jsx
for(var i = 0; i < 2; i++){
	console.log(i);
}
```

```jsx
//결과
0
1
```

![Untitled](https://user-images.githubusercontent.com/75876669/207591162-826893c9-9637-47dc-a7fb-80aab29de325.png)


```jsx
//무한루프
for(;;){...}
```

- 중첩 for문

```jsx
for(var i = 1; i <= 6 ; i++) {
	for(var j = 1; j <= 6; j++) {
		if(i + j === 6) console.log(`[${i}. ${j}]`);
	}
}
```

```jsx
//결과
[1, 5]
[2, 4]
[3, 3]
[4, 2]
[5, 1]
```

## 8.3.2 while문

- 주어진 조건식의 평가 결과가 참이면 코드 블록을 계속해서 반복 실행한다.
- for문은 반복 횟수가 명확할 때 주로 사용
- while문은 반복 횟수가 불명확할 때 주로 사용
- while문은 조건문의 평가 결과가 거짓이 되면 코드 블록을 실행하지 않고 종료한다.

```jsx
var count = 0;

// count가 3보다 작을 때까지 코드 블록을 계속 반복 실행한다.
while (count < 3) {
	console.log(count); // 실행결과 : 0 1 2
	count++;
}
```

```jsx
//무한루프
while(true) { ... }
```

- 무한루프에서 탈출하려면 if문으로 탈출 조건을 만들고 탈출

```jsx
var count = 0;

//무한루프
while (true) {
	console.log(count);
	count++;
	// count가 3이면 코드 블록을 탈출한다.
	if(count === 3) break;
} // 0 1 2
```

## 8.3.3 do … while문

- 코드블록을 먼저 실행하고 조건식을 평가한다.
- 따라서 코드 블록은 무조건 한번 이상 실행된다.

```jsx
var count = 0;

//count가 3보다 작을때까지 코드 블록을 계속 반복 실행한다.
do {
	console.log(count); // 0 1 2
	count++;
} while ( count < 3);
```

# 8.4 break 문

- 코드 블록을 탈출
- 레이블 문, 반복문, switch문의 코드 블록외에 break 문을 사용하면 SyntaxError(문법에러)가 발생한다.
    - 레이블 문 : 식별자가 붙은 문 ex) switch문의 case문, default문
    - 프로그램 실행 순서를 제어하는 데 사용된다.
    - 레이블 문을 탈출하려면 break문에 레이블 식별자를 지정한다.
    
    ```jsx
    //foo라는 레이블 식별자가 붙은 레이블 문
    foo : {
    	console.log(1);
    break foo; // foo레이블 블록문을 탈출한다.
    console.log(2);
    }
    ```
    
    ```jsx
    outer: for(var i =0; i < 3; i++) {
      for(var j = 0;j < 3; j++){
        if (i + j === 3) break outer; 
        console.log(`inner [${i}, ${j}]`);
      }
    }
    ```
    
    - 중첩된 for 문의 내부 for문에서 break 문을 실행하면 내부 for 문을 탈출하여 외부 for문으로 진입한다. 이때 내부 for 문이 아닌 외부 for 문을 탈출하려면 레이블 문을 사용한다.
    - 중첩된 for 문 외부로 탈출할 때 매우 유용하다.
        
        → 그 밖의 경우에는 권장하지 않음
        
        → 프로그램의 흐름이 복잡해져서 가독성이 나빠지고 오류를 발생시킬 가능성이 높아짐
        
- 문자열에서 특정 문자의 개수를 세는 예

```jsx
var string = 'Hello World.';
var search = 'l';
var count = 0;

//문자열은 유사배열이므로 for문으로 순회할 수 있다.
for(var i = 0; i < string.length; i++) {
	// 'l'이 아니면 현 지점에서 실행을 중단하고 반복문의 증감식으로 이동한다.
	if(string[i] !== search) continue;
	count++; // continue 문이 실행되면 이 문은 실행되지 않는다.
} // if문 밖에 코드 작성

for(var i = 0; i < string.length; i++) {
	// 'l'이면 카운트를 증가시킨다. 
	if(string[i] !== search) count++;
} // if문 만에 코드 작성

console.log(count); // 3

// 참고로 String.prototype.match 메소드를 사용해도 같은 동작을 한다.
const regexp = new RegExp(search, 'g');
console.log(string.match(regexp).length); // 3
```



# 9장 타입 변환과 단축 평가

---

# 9.1 타입 변환이란?

- 개발자가 의도적으로 값의 타입을 변환하는 것을 **명시적 타입 변환** 또는 **타입 캐스팅**이라한다.

```jsx
var x = 10;

//명시적 타입 변환
//숫자를 문자열로 타입 캐스팅한다.
var str = x.toString();
console.log(typeof str, str); //string 10

// x 변수의 값이 변경된 것은 아니다.
console.log(typeof x, x); //number 10
```

- 개발자의 의도와는 상관없이 표현식을 평가하는 도중에 자바스크립트 엔진에 의해 암묵적으로 타입이 자동변환되기도 한다. 이를 **암묵적 타입변환** 또는 **타입 강제 변환** 이라한다.

```jsx
var x = 10;

//암묵적 타입 변환
//문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성한다.
var str = x + ' ';
console.log(typeof str, str); string 10

// x 변수의 값이 변경된 것은 아니다.
console.log(typeof x, x); //number 10
```

- 명시적 타입 변환이나 암묵적 타입 변환이 기존 원시값(x)을 직접 변경하는 것은 아니다.
- 타입 변환이란 기존 원시 값을 사용해 다른 타입의 새로운 원시 값을 생성하는 것이다.

- 암묵적 타입 변환은 기존 변수 값을 재할당하여 변경하는 것이 아닌 표현식을 에러 없이 평가하기 위해 피연산자의 값을 암묵적 타입 변환해 새로운 타입의 값을 만들어 단 한 번 사용하고 버린다.

# 9.2 암묵적 타입 변환

```jsx
//피연산자가 모두 문자열 타입이어야 하는 문맥
'10' + 2 // -> '102'

//피연산자가 모두 숫자 타입이어야 하는 문맥
5 * '10' // -> 50

//피연산자가 또는 표현식이 불리언 타입이어야 하는 문맥
!0 // -> true
if (1) { }
```

## 9.2.1 문자열 타입으로 변환

```jsx
1 + '2' // -> "12"
```

- 위 예제의 + 연산자는 피연산자 중 하나 이상이 문자열이므로 문자열 연결 연산자로 동작한다.
- 문자열 연결 연산자 : 문자열 값을 만드는 역할
- 문자열 연결 연산자의 모든 피연산자는 코드의 문맥상 모두 문자열 타입이어야 한다.
    
    → 자바스크립트 엔진은 문자열 연결 연산자 표현식을 평가하기 위해 문자열 연결 연산자의 피연산자 중에서 문자열 타입이 아닌 피연산자를 문자열 타입으로 암묵적 타입 변환한다.
    

- 템플릿 리터럴의 표현식 삽입은 표현식의 평가 결과를 문자열 타입으로 암묵적 타입 변환한다.

```jsx
`1 + 1 = ${1 + 1}` // -> "1 + 1 = 2"
```

```jsx
// 숫자 타입
0 + ''         // -> "0"
-0 + ''        // -> "0"
1 + ''         // -> "1"
-1 + ''        // -> "-1"
NaN + ''       // -> "NaN"
Infinity + ''  // -> "Infinity"
-Infinity + '' // -> "-Infinity"

// 불리언 타입
true + ''  // -> "true"
false + '' // -> "false"

// null 타입
null + '' // -> "null"

// undefined 타입
undefined + '' // -> "undefined"

// 심벌 타입
(Symbol()) + '' // -> TypeError: 기호 값을 문자열로 변환할 수 없습니다.

// 객체 타입
({}) + ''           // -> "[object Object]"
Math + ''           // -> "[object Math]"
[] + ''             // -> ""
[10, 20] + ''       // -> "10,20"
(function(){}) + '' // -> "function(){}"
Array + ''          // -> "function Array() { [native code] }"
```

## 9.2.2 숫자 타입으로 변환

```jsx
1 -> '1'  // -> 0
1 * '10'  // -> 10
1 / 'one' // -> NaN
```

- 산술 연산자의 역할은 숫자 값을 만드는 것이다.
- 산술 연산자의 모든 피연산자는 코드 문맥상 모두 숫자 타입이어야 한다.
- 자바스크립트 엔진은 산술 연산자 표현식을 평가하기 위해 산술 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입변환한다.
- 피연산자를 숫자 타입으로 변환할 수 없는 경우는 산술 연산을 수행할 수 없으므로 표현식의 평가 결과는 NaN이 된다.

```jsx
'1' > 0 // true
```

- 비교 연산자의 역할은 불리언 값을 만드는 것이다.
- 비교 연산자는 피연산자의 크기를 비교하므로 모든 피연산자는 코드의 문맥상 모두 숫자 타입이어야한다.
- 자바스크립트 엔진은 비교 연산자 표현식을 평가하기 위해 비교 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입변환한다.

- + 단항 연산자는 피연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적 타입 변환을 수행한다.

```jsx
//문자열 타입
+''         // -> 0
+'0'        // -> 0
+'1'        // -> 1
+'string'   // -> NaN

//불리언 타입
+true       // -> 1
+false      // -> 0

//null 타입
+null       // -> 0

//undefined 타입
+undefined  // -> NaN

//symbol 타입
+Symbol()   // -> TypeError: 기호 값을 숫자로 변환할 수 없습니다.

//객체 타입
+{}         // -> NaN
+[]         // -> 0
+[10, 20]   // -> NaN
+(function(){})// -> NaN
```

## 9.2.3 불리언 타입으로 변환

```jsx
if('') console.log(x);
```

- if문이나 for문과 같은 제어문 또는 삼항 조건 연산자의 조건식은 불리언 값, 즉 논리적 참/거짓 으로 평가 되어야 하는 표현식이다.
- 자바스크립트 엔진은 조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환한다.

```jsx
if('')      console.log('1');
if(true)    console.log('2');
if(0)       console.log('3');
if('str')   console.log('4');
if(null)    console.log('5');

// 2 4
```

- **이 때 자바스크립트 엔진은 불리언 타입이 아닌 값을 참으로 평가되는 값 또는 거짓으로 평가되는 값으로 구분한다.**
- 제어문의 조건식과 같이 불리언 값으로 평가되어야 할 문맥에서 각각 true, false로 암묵적 타입 변환 된다.

```jsx
// 아래의 조건문은 모두 코드 블록을 실행한다.
if (!false)     console.log(false + ' is falsy value');
if (!undefined) console.log(undefined + ' is falsy value');
if (!null)      console.log(null + ' is falsy value');
if (!0)         console.log(0 + ' is falsy value');
if (!NaN)       console.log(NaN + ' is falsy value');
if (!'')        console.log('' + ' is falsy value');
```

- falsy 값 외의 모든 값은 모두 true로 평가되는 truthy 값이다.

- truthy/falsy 값을 판별하는 함수

```jsx
// 전달받은 인수가 Falsy 값이면 true, Truthy 값이면 false를 반환한다.
function isFalsy(v) {
  return !v;
}

// 전달받은 인수가 Truthy 값이면 true, Falsy 값이면 false를 반환한다.
function isTruthy(v) {
  return !!v;
}

// 모두 true를 반환한다.
isFalsy(false);
isFalsy(undefined);
isFalsy(null);
isFalsy(0);
isFalsy(NaN);
isFalsy('');

// 모두 true를 반환한다.
isTruthy(true);
isTruthy('0'); // 빈 문자열이 아닌 문자열은 Truthy 값이다.
isTruthy({});
isTruthy([]);
```

# 9.3 명시적 타입 변환

- 개발자의 의도에 따라 명시적으로 타입을 변경하는 방법
    - 표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법
    - 빌트인 메서드를 사용하는 방법
    - 암묵적 타입 변환을 이용하는 방법
    
- 표준 빌트인 생성자 함수, 빌트인 메서드
    - 자바스크립트에서 기본제공하는 함수
    
     → 표준 빌트인 생성자 함수는 객체를 생성하기 위한 함수이며 new 연산자와 함께 호출한다.
    
    - 표준 빌트인 메서드 : 자바스크립트에서 기본 제공하는 빌트인 객체의 메서드

## 9.3.1 문자열 타입으로 변환

- String 생성자 함수를 new 연산자 없이 호출하는 방법
- Object.prototype.toString 메서드를 사용하는 방법
- 문자열 연결 연산자를 이용하는 방법

```jsx
// 1. String 생성자 함수를 new 연산자 없이 호출하는 방법
// 숫자 타입 => 문자열 타입
String(1);        // -> "1"
String(NaN);      // -> "NaN"
String(Infinity); // -> "Infinity"

// 불리언 타입 => 문자열 타입
String(true);     // -> "true"
String(false);    // -> "false"

// 2. Object.prototype.toString 메서드를 사용하는 방법
// 숫자 타입 => 문자열 타입
(1).toString();        // -> "1"
(NaN).toString();      // -> "NaN"
(Infinity).toString(); // -> "Infinity"

// 불리언 타입 => 문자열 타입
(true).toString();     // -> "true"
(false).toString();    // -> "false"

// 3. 문자열 연결 연산자를 이용하는 방법
// 숫자 타입 => 문자열 타입
1 + '';        // -> "1"
NaN + '';      // -> "NaN"
Infinity + ''; // -> "Infinity"

// 불리언 타입 => 문자열 타입
true + '';     // -> "true"
false + '';    // -> "false"
```

## 9.3.2 숫자 타입으로 변환

- Number 생성자 함수를 new 연산자 없이 호출하는 방법
- parseInt, parseFloat 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)
- + 단한 산술연산자를 이용하는 방법
- * 산술 연산자를 이용하는 방법

```jsx
// 1. Number 생성자 함수를 new 연산자 없이 호출하는 방법
// 문자열 타입 => 숫자 타입
Number('0');     // -> 0
Number('-1');    // -> -1
Number('10.53'); // -> 10.53

// 불리언 타입 => 숫자 타입
Number(true);    // -> 1
Number(false);   // -> 0

// 2. parseInt, parseFloat 함수를 사용하는 방법(문자열만 변환 가능)
// 문자열 타입 => 숫자 타입
parseInt('0');       // -> 0
parseInt('-1');      // -> -1
parseFloat('10.53'); // -> 10.53

// 3. + 단항 산술 연산자를 이용하는 방법
// 문자열 타입 => 숫자 타입
+'0';     // -> 0
+'-1';    // -> -1
+'10.53'; // -> 10.53

// 불리언 타입 => 숫자 타입
+true;    // -> 1
+false;   // -> 0

// 4. * 산술 연산자를 이용하는 방법
// 문자열 타입 => 숫자 타입
'0' * 1;     // -> 0
'-1' * 1;    // -> -1
'10.53' * 1; // -> 10.53

// 불리언 타입 => 숫자 타입
true * 1;    // -> 1
false * 1;   // -> 0
```

## 9.3.3 불리언 타입으로 변환

- Boolean 생성자 함수를 new 연산자 없이 호출하는 방법
- ! 부정 논리 연산자를 2번 사용하는 방법

```jsx
// 1. Boolean 생성자 함수를 new 연산자 없이 호출하는 방법
// 문자열 타입 => 불리언 타입
Boolean('x');       // -> true
Boolean('');        // -> false
Boolean('false');   // -> true

// 숫자 타입 => 불리언 타입
Boolean(0);         // -> false
Boolean(1);         // -> true
Boolean(NaN);       // -> false
Boolean(Infinity);  // -> true

// null 타입 => 불리언 타입
Boolean(null);      // -> false

// undefined 타입 => 불리언 타입
Boolean(undefined); // -> false

// 객체 타입 => 불리언 타입
Boolean({});        // -> true
Boolean([]);        // -> true

// 2. ! 부정 논리 연산자를 두번 사용하는 방법
// 문자열 타입 => 불리언 타입
!!'x';       // -> true
!!'';        // -> false
!!'false';   // -> true

// 숫자 타입 => 불리언 타입
!!0;         // -> false
!!1;         // -> true
!!NaN;       // -> false
!!Infinity;  // -> true

// null 타입 => 불리언 타입
!!null;      // -> false

// undefined 타입 => 불리언 타입
!!undefined; // -> false

// 객체 타입 => 불리언 타입
!!{};        // -> true
!![];        // -> true
```

# 9.4 단축평가

## 9.4.1 논리연산자를 사용한 단축 평가

- 논리합(||), 논리곱(&&)연산자 표현식의 평가 결과는 불리언 값이 아닐 수도 있다
- 논리합(||), 논리곱(&&)연산자 표현식은 언제나 2개의 피연산자 중 어느 한쪽으로 평가된다.

```jsx
'Cat' && 'Dog' // -> "Dog"
```

- 논리곱 연산자는 좌항에서 우항으로 평가가 진행된다.
- 첫번째 피연산자 ‘Cat’은 Truthy 값이므로 true로 평가된다.
- 두번째 피연산자가 위 논리곱 연산자 표현식의 평가결과를 결정한다.
- 논리 연산의 결과를 경정하는 두번째 피연산자, 즉 문자열 ‘Dog’를 그대로 반환한다.

```jsx
'Cat' || 'Dog' // -> "Cat"
```

- 논리합 연산자는 두개의 피연산자 중 하나만 true로 평가되어도 true를 반환한다.
- 논리합 연산자도 좌항에서 우항으로 평가가 진행된다.
- 첫번째 피연산자 ‘Cat은 Truthy 값이므로 true로 평가된다.
- 논리합 연산자는 첫번째 피연산자 값이 true이면 두번째 피연산자까지 평가하지 않아도 표현식을 평가할 수 있다.
- 논리 연산의 결과를 결정한 첫번째 피연산자 즉 문자열 ‘Cat’을 그대로 반환한다,.

- 논리곱 연산자와 논리합 연산자는 이처럼 **논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환한다.** 이를 **단축평가**라 한다.
- 단축평가 : 표현식을 평가하는 도중에 평가결과가 확정된 경우 나머지 평가 과정을 생략하는 것을 말한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207591306-8800ab8d-006f-4668-b86b-565b4e37267f.png)

```jsx
// 논리합(||) 연산자
'Cat' || 'Dog'  // -> "Cat"
false || 'Dog'  // -> "Dog"
'Cat' || false  // -> "Cat"

// 논리곱(&&) 연산자
'Cat' && 'Dog'  // -> "Dog"
false && 'Dog'  // -> false
'Cat' && false  // -> false
```

- 단축평가를 사용하면 if 문을 대체할 수 있다.

```jsx
// 어떤 조건이 Truthy 값일 때는 논리곱 연산자 표현식으로 대체 가능

var done = true;
var message = '';

// 주어진 조건이 true일 때
if (done) message = '완료';

// if 문은 단축 평가로 대체 가능하다.
// done이 true라면 message에 '완료'를 할당
message = done && '완료';
console.log(message); // 완료
```

```jsx
// 어떤 조건이 Falsy 값일 때는 논리합 연산자 표현식으로 대체 가능

var done = false;
var message = '';

// 주어진 조건이 false일 때
if (!done) message = '미완료';

// if 문은 단축 평가로 대체 가능하다.
// done이 false라면 message에 '미완료'를 할당
message = done || '미완료';
console.log(message); // 미완료
```

참고

- 삼항 조건 연산자는 if…else 문을 대체할 수 있다.

```jsx
var done = true;
var message = '';

// if...else 문
if (done) message = '완료';
else      message = '미완료';
console.log(message); // 완료

// if...else 문은 삼항 조건 연산자로 대체 가능하다.
message = done ? '완료' : '미완료';
console.log(message); // 완료
```

### 객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참조할 때

- 객체 = 키와 값으로 구성된 프로퍼티의 집합
- 객체를 가리키기를 기대하는 변수의 값이 객체가 아니라 null 또는 undefined인 경우 격체의 프로퍼티를 참조하면 타입에러가 발생한다.

```jsx
var elem = null;
var value = elem.value; // TypeError : Cannot read property 'value' of null
```

- 객체를 가리키기 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참조할 때 단축평가를 사용하면 에러없어 사용할 수 있다.

```jsx
var elem = null;

// elem이 null이나 undefined와 같은 Falsy 값이면 elem으로 평가되고
// elem이 Truthy 값이면 elem.value로 평가된다.
var value = elem && elem.value; // -> null
```

### 함수 매개변수에 기본값을 설정할 때

- 함수를 호출할 때 인수를 전달하지 않으면 매개변수에는 undefined가 할당된다.
- 이때 단축 평가를 사용해 매개변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다.

```jsx
// 단축 평가를 사용한 매개변수의 기본값 설정
function getStringLength(str) {
  str = str || '';  // 단축 평가
  return str.length;
}

getStringLength();     // -> 0
getStringLength('hi'); // -> 2

// ES6의 매개변수의 기본값 설정
function getStringLength(str = '') {
  return str.length;
}

getStringLength();     // -> 0
getStringLength('hi'); // -> 2
```

## 9.4.2 옵셔널 체이닝 연산자

## 9.4.3 null 병합 연산자



# 10장 객체 리터럴

---

# 10.1 객체란?

- 자바스크립트 : 객체 기반의 프로그래밍 언어
- 원시 값을 제외한 나머지 값(함수, 배역, 정규 표현식) 모두 객체이다.

- 원시타입은 단 하나의 값만 나타내지만
- 객체 타입은 다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료구조다
- 원시타입 : 변경 불가능한 값
- 객체 : 변경 가능한 값

- 객체는 0개 이상의 프로퍼티로 구성된 집합, 프로퍼티는 키와 값으로 구성된다.

![Untitled](https://user-images.githubusercontent.com/75876669/207591441-6740c687-2eda-4f9f-8d80-60bc9bf61a5b.png)

- 자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있다.
    
    → 함수는 [일급 객체](https://tang-co.tistory.com/143)이므로 값으로 취급할 수 있다.
    
    → 프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드라 부른다.
    

![Untitled](https://user-images.githubusercontent.com/75876669/207591517-fdb27d68-4382-41dd-82a4-2b6377f7b688.png)

- 객체는 프로퍼티와 메서드로 구성된 집합체
    - 프로퍼티 : 객체의 상태를 나타내는 값(data)
    - 메서드 : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)

→ 이처럼 객체는 객체의 상태를 나타내는 값과 조작할 수 있는 동작을 모두 포함 할 수 있기 때문에 상태와 동작을 하나의 단위로 구조화 할 수 있어서 유용하다.

# 10.2 객체 리터럴에 의한 객체 생성

- C++나 자바 같은 클래스 기반 객체지향 언어는 클래스를 사전에 정의하고 필요한 시점에 new 연산자와 함께 생성자를 호출하여 인스턴스를 생성하는 방식으로 객체를 생성한다.
    - 인스턴스 : 클래스에 의해 생성되어 메모리에 저장된 실체를 말한다. 객체지향 프로그래밍에서는 객체는 클래스와 인스턴스를 포함한 개념이다.
        
        → 클래스는 인스턴스를 생성하기 위한 템플릿 역할을 한다.
        

- 자바스크립트는 프로토타입 기반 객체지향 언어로서 다양한 객체 생성 방법을 지원한다.
    - 객체리터럴 : 객체를 생성하기 위한 표기법
    - Object 생성자 함수
    - 생성자 함수
    - Object.create 메서드
    - 클래스(ES6)

- 객체리터럴은 중괄호({…}) 내에 0개 이상의 프로퍼티를 정의한다.
- 변수에 할당되는 시점에 자바스크립트 엔진은 객체리터럴을 해석해 객체를 생성

```jsx
var person = {
  name: 'Lee',
  sayHello: function () {
    console.log(`Hello! My name is ${this.name}.`);
  }
};

console.log(typeof person); // object
console.log(person); // {name: "Lee", sayHello: ƒ}
```

- 중괄호 내에 프로퍼티를 정의하지 않으면 빈 객체가 생성된다.

```jsx
var empty = {}; // 빈 객체
console.log(typeof empty); // object
```

- **객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다.**
    
     → 객체리터럴은 값으로 평가되는 표현식이기 때문
    

# 10.3 프로퍼티

- 객체는 프로퍼티의 집합
- 프로퍼티는 키와 값으로 구성된다.

```jsx
var person = {
  // 프로퍼티 키는 name, 프로퍼티 값은 'Lee'
  name: 'Lee',

  // 프로퍼티 키는 age, 프로퍼티 값은 20
  age: 20
};
```

- 프로퍼티를 나열할 때는 쉼표로 구분
- 프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
- 프로퍼티 값 : 자바스크립트에서 사용할 수 있는 모든 값

- 프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름으로서 식별자 역할을 한다.

- 심벌 값도 프로퍼티 키로 사용할 수 있지만 일반적으로 문자열을 사용
- 이때 프로퍼티 키는 문자열이므로 따옴표로 묶어야 한다.
- 자바스크립트에서 사용 가능한 유효한 이름인 경우(식별자 네이밍 규칙을 준수하는 이름) 따옴표를 생략할 수 있다.
    
    →식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따옴표를 사용해야 한다.
    

```jsx
var person = {
  firstName: 'min-jae', // 식별자 네이밍 규칙을 준수하는 프로퍼티 키
  'last-name': 'Kim'   // 식별자 네이밍 규칙을 준수하지 않는 프로퍼티 키
};

console.log(person); // {firstName: "min-jae", last-name: "Kim"}
```

- 번거로운 일이 생기니 가급적 식별자 네이밍 규칙을 준수하는 프로퍼티 키를 사용할 것을 권장
- ‘’가 없으면 last-name에서 -가 -연산자가 있는 표현식으로 해석한다.

- 문자열 또는 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수도 있다.
- 이 경우에는 프로퍼티 키로 사용할 표현식을 대괄호([…])로 묶어야한다.

```jsx
var obj = {};
var key = 'hello';

// ES5: 프로퍼티 키 동적 생성
obj[key] = 'world';
// ES6: 계산된 프로퍼티 이름
// var obj = { [key]: 'world' };

console.log(obj); // {hello: "world"}
```

- 빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지는 않는다
- 하지만 키로서의 의미를 갖지 못하므로 권장하지 않는다.

- 프로퍼티 키에 문자열이나 심벌 값 외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이된다.

```jsx
var foo = {
  0: 1,
  1: 2,
  2: 3
};

console.log(foo); // {0: 1, 1: 2, 2: 3}
```

- var, function과 같은 예약어를 프로퍼티 키로 사용해도 에러가 발생하지는 않는다.
- 하지만 예상치 못한 에러가 발생할 여지가 있으므로 권장하지 않는다.

- 이미 존재하는 프로퍼티 키를 중복 선언하면 나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어쓴다.
- 이때 에러가 발생하지는 않는다.

```jsx
var foo = {
  name: 'Lee',
  name: 'Kim'
};

console.log(foo); // {name: "Kim"}
```

# 10.4 메서드

- 함수는 값으로 취급할 수 있기 때문에 프로퍼티 값으로 사용할 수 있다.
- 프로퍼티 값이 함수일 경우 일밚 함수와 구분하기 위해 메서드라 부른다.
- 메서드는 객체에 묶여 있는 함수를 의미한다.

```jsx
var circle = {
  radius: 5, // ← 프로퍼티

  // 원의 지름
  getDiameter: function () { // 메서드
    return 2 * this.radius; // this는 circle을 가리킨다.
  }
};

console.log(circle.getDiameter()); // 10
```

# 10.5 프로퍼티 접근

- 마침표 프로퍼티 접근 연산자를 사용하는 마침표 표기법
- 대괄호 프로퍼티 접근 연산자를 사용하는 대괄호 표기법

```jsx
var person = {
  name: 'Lee'
};

// 마침표 표기법에 의한 프로퍼티 접근
console.log(person.name); // Lee

// 대괄호 표기법에 의한 프로퍼티 접근
console.log(person['name']); // Lee
```

- 대괄호 표기법을 사용하는 경우 **대괄호 프로퍼티 접근 연산자 내부에 지정하는 프로퍼티 키는 반드시 따옴표로 감싼 문자열**이어야한다
- 그렇지 않으면 자바스크립트 엔진은 식별자로 해석한다,

```jsx
var person = {
  name: 'Lee'
};

console.log(person[name]); // ReferenceError: name is not defined
```

- 객체에 존재하지 않은 프로퍼티에 접근하면 undefined를 반환한다.

```jsx
var person = {
  name: 'Lee'
};

console.log(person.age); // undefined
```

![Untitled](https://user-images.githubusercontent.com/75876669/207591643-142805f9-04ff-46ba-8ff8-5d464556c1e3.png)

![Untitled](https://user-images.githubusercontent.com/75876669/207591744-84b2842e-d2ef-46ba-b994-2559e86b463e.png)

# 10.6 프로퍼티 값 갱신

- 이미 존재하는  프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.

```jsx
var person = {
  name: 'Lee"
};

// person 객체에 name 프로퍼티가 존재하므로 name 프로퍼티의 값이 갱신된다.
person.name = 'Kim';

console.log(person);  // {name: "Kim"}
```

# 10.7 프로퍼티 동적 생성

- 존재하지 않은 프로퍼티에 값을 할댕하면 프로퍼티가 동적으로 생성되어 추가되고 프로퍼티 값이 할당된다

```jsx
var person = {
  name: 'Lee"
};

// person 객체에는 age 프로퍼티가 존재하지 않는다.
// 따라서 person 객체에 age 프로퍼티가 동적으로 생성되고 값이 할당된다.
person.age = 20;

console.log(person); // {name: "Lee", age: 20}
```

# 10.8 프로퍼티 삭제

- delete 연산자는 객체의 프로퍼티를 삭제
- delete연산자의 피연산자는 프로퍼티 값에 접근할 수 있는 표현식이어야 한다,
- 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.

```jsx
var person = {
  name: 'Lee'
};

// 동적 생성
person.age = 20;

delete person.age;

delete person.address;

console.log(person); // {name: "Lee"}
```

# 10.9 ES6에서 추가된 객체 리터럴의 확장 기능

## 10.9.1 프로퍼티 축약 표현

- 객체 리터럴의 프로퍼티는 프로퍼티 키와 프로퍼티 값으로 구성된다.
- 프로퍼티 값은 변수에 할당된 값, 즉 식별자 표현식일 수도 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207591887-f3c7899a-a495-4239-a9a2-9082ed7be1ca.png)

- ES6에서는 프로퍼티 값으로 변수를 사용하는 경우 변수 이름과 프로퍼티 키가 동일한 이름일때 프로퍼티 키를 생략할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207592047-979b623f-999f-461e-ad70-c00eac250048.png)

## 10.9.2 계산된 프로퍼티 이름

- 계산된 프로퍼티 이름 : 문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수도 있다. 단 프로퍼티 키로 사용할 표현식을 대괄호로 묶어야한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207592359-6bf41ee1-9bf3-4fea-8ea3-35acdee2f430.png)

- ES6에서는 객체 리터럴 내부에서도 계산된 프로퍼티 이름으로 프로퍼티 키를 동적 생성할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207592477-825160ce-c604-408a-afb0-e1dd6a282da6.png)

## 10.9.3 메서드 축약 표현

- ES5에서 메서드를 정의하려면 프로퍼티 값으로 함수를 할당한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207592707-c0c709ba-c311-48d2-a020-a632ae66b048.png)

- ES6에서는 메서드를 정의할 때 function 키워드를 생략한 축약 표현을 사용할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207592783-e330ccf0-6a10-4690-bc1d-d0a3c86d8cc8.png)


11장 원시 값과 객체의 비교