---
layout: post
title:  모던자바스크립트 Deep Dive 20장~21장
date:   2022-08-02 10:00:00 +0300
image:  Javascript.jpg
tags:   Javascript
---

# 20장 strict mode

---

# 20.1 strict mode란?

```jsx
function foo() {
	x = 10;
}
foo();

console.log(x) // ?
```

- 전역 스코프에도 x변수의 선언이 존재하지 않기 때문에 ReferenceError를 발생시킬 것 같지만
- 자바스크립트 엔진은 암묵적으로 전역 객체에 x프로퍼티를 동적 생성한다
- 이때 전역 객체의 x 프로퍼티는 마치 전역 변수처럼 사용할 수 있다.
- 이를 **암묵적 전역**이라한다.

- strict mode는 자바스크립트 언어의 문법을 좀 더 엄격히 적용하여 오류를 발생시킬 가능성이 높거나 자바스크립트 엔진의 최적화 작업에 문제를 일으킬 수 있는 코드에 대해 명시적인 에러를 발생시킨다

- ESLint같은 린트 도구를 사용해도 strict mode와 유사한 효과를 얻을 수 있다
- 린트 도구는 정적 분석 기능을 통해 소스코드를 실행하기 전에 소스코드를 스캔함여 문법적 오류뿐만이 아니라 잠재적 오류까지 찾아내고 오류의 원인을 리포팅해주는 유용한 도구다.

![Untitled](https://user-images.githubusercontent.com/75876669/207602114-c57b3689-5cb9-4d3f-bcb8-00dc25db819c.png)

- 린트도구는 strict mode가 제한하는 오류는 물론 코딩 컨벤션을 설정 파일 형태로 정의하고 강제할 수 있기 때문에 더욱 강력한 효과를 얻을 수 있다 → strict mode보다 린트 도구의 사용을 선호

# 20.2 strict mode의 적용

- strict mode를 적용하려면 전역의 선두 또는 함수 몸체의 선두에 ‘use strict’;를 추가한다
- 전역의 선두에 추가하면 스크립트 전체에 strict mode가 적용된다

```jsx
'use strict';

function foo() {
  x = 10; // x is not defined
}
foo();
```

- 함수 몸체의 선두에 추가하면 해당 함수와 중첩 함수에 strict mode가 적용된다

```jsx
function foo() {
  'use strict';

  x = 10; // ReferenceError: x is not defined
}
foo();
```

- 코드의 선두에 ‘use strict’;를 위치시키지 않으면 strict mode가 제대로 동작하지 않는다

```jsx
function foo() {
	x = 10; // 에러를 발생시키지 않는다
	'use strict';
}
foo();
```

# 20.3 전역에 strict mode를 적용하는 것은 피하자

- 전역에 적용한 strict mode는 스크립트 단위로 적용된다

```jsx
<!DOCTYPE html>
<html>
<body>
  <script>
    'use strict';
  </script>
  <script>
    x = 1; // 에러가 발생하지 않는다.
    console.log(x); // 1
  </script>
  <script>
    'use strict';

    y = 1; // ReferenceError: y is not defined
    console.log(y);
  </script>
</body>
</html>
```

- 스크립트 단위로 적용된 strict mode는 다른 스크립트에 영향을 주지 않고 해당 스크립트에 한정되어 적용된다

- 하지만 strict mode 스크립트와 non-strict mode 스크립트를 혼용하는 것은 오류를 발생시킬 수 있다
- 예로 외부 서드파티 라이브러리를 사용하는 경우 라이브러리가 non-strict mode인 경우도 있기 때문에 전역에 strict mode를 적용하는 것은 바람직하지 않다

- 이러한 경우 즉시 실행 함수로 스크립트 전체를 감싸서 스코프를 구분하고 즉시 실행 함수의 선두에 strict mode를 적용한다

```jsx
// 즉시 실행 함수의 선두에 strict mode 적용
(function () {
  'use strict';
	.
	.
	.
	.
  
}());
```

# 20.4 함수 단위로 strict mode를 적용하는 것도 피하자

- 함수단위로 strict mode를 적용할 수 있다
- 그러나 어떤 함수는 strict mode를 적용하고 어떤 함수는 strict mode를 적용하지 않는 것은 바람직 하지 않으며 모든 함수에 일일이 strict mode를 적용하는 것은 번거로운 일이다
- 그리고 strict mode가 적용된 함수가 참조할 함수 외부의 컨텍스트에 strict mode를 적용하지 않아도 문제가 발생할 수 있다

```jsx
(function () {
  // non-strict mode
  var lеt = 10; // 에러가 발생하지 않는다.

  function foo() {
    'use strict';

    let = 20; // SyntaxError: 예기치 않은 엄격한 모드 예약 단어
  }
  foo();
}());
```

- 따라서 strict mode는 즉시 실행 함수로 감싼 스크립트 단위로 적용하는 것이 바람직하다

# 20.5 strict mode가 발생시키는 에러

## 20.5.1 암묵적 전역

- 선언하지 않은 변수를 참조하면 ReferenceError가 발생한다

```jsx
(function () {
	'use strict';
	
	x = 1;
	console.log(x); // ReferenceError : x is not defined
}());
```

## 20.5.2 변수, 함수, 매개변수의 삭제

- delete 연산자로 변수, 함수, 매개변수를 삭제하면 SyntaxError가 발생한다

```jsx
(function () {
  'use strict';

  var x = 1;
  delete x;
  // SyntaxError: 엄격한 모드에서 정규화되지 않은 식별자를 삭제합니다.

  function foo(a) {
    delete a;
    // SyntaxError: 엄격한 모드에서 정규화되지 않은 식별자를 삭제합니다.
  }
  delete foo;
  // SyntaxError: 엄격한 모드에서 정규화되지 않은 식별자를 삭제합니다.
}());
```

## 20.5.3 매개변수 이름의 중복

- 중복된 매개변수 이름을 사용하면 SyntaxError가 발생한다

```jsx
(function () {
  'use strict';

  //SyntaxError: 이 컨텍스트에서는 중복된 매개 변수 이름을 사용할 수 없습니다
  function foo(x, x) {
    return x + x;
  }
  console.log(foo(1, 2));
}());
```

## 20.5.4 with문의 사용

- with문은 전달된 객체를 스코프 체인에 추가한다
- with문은 동일한 객체의 프로퍼티를 반복해서 사용할 때 객체의 이름을 생략할 수 있어서 코드가 간단해지는 효과가 있지만 성능과 가독성이 나빠지는 문제가 있다

```jsx
(function () {
  'use strict';

  // SyntaxError: 엄격한 모드 코드에는 with 문을 포함할 수 없습니다
  with({ x: 1 }) {
    console.log(x);
  }
}());
```

# 20.6 strict mode 적용에 의한 변화

## 20.6.1 일반 함수의 this

- strict mode에서 함수를 일반함수로서 호출하면 this에 undefined가 바인딩된다
    
    → 생성자 함수가 아닌 일반 함수 내부에서는 this를 사용할 필요가 없기 때문이다(에러 발생X)
    

```jsx
(function () {
  'use strict';

  function foo() {
    console.log(this); // undefined
  }
  foo();

  function Foo() {
    console.log(this); // Foo
  }
  new Foo();
}());
```

## 20.6.2 arguments 객체

- strict mode에서는 매개변수에 전달된 인수를 재할당하여 변경해도 arguments 객체에 반영되지 않는다

```jsx
(function (a) {
  'use strict';
  // 매개변수에 전달된 인수를 재할당하여 변경
  a = 2;

  // 변경된 인수가 arguments 객체에 반영되지 않는다.
  console.log(arguments); // { 0: 1, length: 1 }
}(1));
```



# 21장 빌트인 객체

---

# 21.1 자바스크립트 객체의 분류

- 표준 빌트인 객체
    - ECMAScript 사양에 정의된 객체를 말하며, 애플리케이션 전역의 공통 기능을 제공한다
    - 자바스크립트 실행 환경과 관계없이 언제나 사용할 수 있다
    - 전역 객체의 프로퍼티로서 제공이 되어 별도의 선언 없이 전역 변수처럼 언제나 참조할 수 있다
- 호스트 객체
    - ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행환경에서 추가로 제공되는 객체를 말한다
- 사용자 정의 객체
    - 기본 제공되는 객체가 아닌 사용자가 직접 정의한 객체를 말한다

# 21.2 표준 빌트인 객체

- ex) Object, String, Number, Boolean, Symbol, Date, Math, RegExp, Array, Map/Set, ….. 등
- Math, Reflect, JSON을 제외한 표준 빌트인 객체는 모두 인스턴스를 생성할 수 있는 생성자 함수 객체다
- 생성자 함수 객체인 표준 빌트인 객체는 프로토타입 메서드와 정적 메서드를 제공하고 생성자 함수 객체가 아닌 표준 빌트인 객체는 정적 메서드만 제공한다

- 표준 빌트인 객체인 String, Number, Boolean, Function, Array, Date는 생성자 함수로 호출하여 인스턴스를 생성할 수 있다.

```jsx
// String 생성자 함수에 의한 String 객체 생성
const strObj = new String('Lee');
console.log(typeof strObj); // object

// Number 생성자 함수에 의한 Number 객체 생성
const numObj = new Number(123);
console.log(typeof numObj); // object

// Boolean 생성자 함수에 의한 Boolean 객체 생성
const boolObj= new Boolean(true); 
console.log(typeof boolObj); // object

// Function 생성자 함수에 의한 Function 객체(함수) 생성
const func = new Function('x', 'return x * x'); 
console.log(typeof func); // function

// Array 생성자 함수에 의한 Array 객체(배열) 생성
const arr = new Array(1, 2, 3); 
console.log(typeof arr); // object

// RegExp 생성자 함수에 의한 RegExp 객체(정규 표현식) 생성
const regExp = new RegExp(/ab+c/i);
console.log(typeof regExp); // object

// Date 생성자 함수에 의한 Date 객체 생성
const date = new Date();  
console.log(typeof date); // object
```

- 생성자 함수인 표준 빌트인 객체가 생성한 인스턴스의 프로토타입은 표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체다.
- ex) 표준 빌트인 객체인 String을 생성자 함수로 호출하여 생성한 String 인스턴스의 프로토타입은 String.Prototype이다.

```jsx
// String 생성자 함수에 의한 String 객체 생성
const strObj = new String('Lee'); // String {"Lee"}

// String 생성자 함수를 통해 생성한 strObj 객체의 프로토타입은 String.prototype이다.
console.log(Object.getPrototypeOf(strObj) === String.prototype); // true
```

- 표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체는 다양한 기능의 빌트인 프로토타입 메서드를 제공한다.
- 표준 빌트인 객체는 인스턴스 없이도 호출 가능한 빌트인 정적 메소드를 제공한다

- 이 프로토타입 메서드는 모든 Number 인스턴스가 상속을 통해 사용할 수 있다.
- 그리고 표준 빌트인 객체인 Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메서드를 제공한다.

```jsx
// Number 생성자 함수에 의한 Number 객체 생성
const numObj = new Number(1.5); // Number {1.5}

// toFixed는 Number.prototype의 프로토타입 메서드다.
// Number.prototype.toFixed는 소수점 자리를 반올림하여 문자열로 반환한다.
console.log(numObj.toFixed()); // 2

// isInteger는 Number의 정적 메서드다.
// Number.isInteger는 인수가 정수(integer)인지 검사하여 그 결과를 Boolean으로 반환한다.
console.log(Number.isInteger(0.5)); // false
```

# 21.3 원시 값과 래퍼 객체

- 문자열이나 숫자, 불리언 등의 원시값이 있는데도 문자열, 숫자, 불리언 객체를 생성하는 표준 빌트인 생성자 함수가 존재하는 이유
- ex) 원시값은 객체가 아니므로 프로퍼티나 메서드를 가질 수 없는데도 원시값인 문자열이 마치 객체처럼 동작한다.

```jsx
const str = 'hello';

// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.
console.log(str.length); // 5
console.log(str.toUpperCase()); // HELLO
```

- 원시값인 문자열, 숫자, 불리언 값의 경우 이들 원시값에 대해 마치 객체처럼 마침표 주기법으로 접근하면 자바스크립트 엔진이 일시적으로 원시값을 연관된 객체로 변환해 주기 때문이다.
- 즉 원시값을 객체처럼 사용하면 자바스크립트 엔진은 암묵적으로 연관된 객체를 생성하여 생성된 객체로 프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 되돌린다

- 이처럼 **문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 래퍼 객체**라 한다.

```jsx
const str = 'hi';

// 원시 타입인 문자열이 래퍼 객체인 String 인스턴스로 변환된다.
console.log(str.length); // 2
console.log(str.toUpperCase()); // HI

// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.
console.log(typeof str); // string
```

- 이때 문자열 래퍼 객체인 String 생성자 함수의 인스턴스는 String.prototype의 메서드를 상속받아 사용할 수 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207602287-8677c09c-32dd-4ebf-b991-9efb0ea0f5d3.png)

- 그 후 래퍼 객체의 처리가 종료되면 래퍼 객체의 [[StringData]]내부 슬롯에 할당된 원시값으로 원래의 상태, 즉 식별자가 원시값을 갖도록 되돌리고 래퍼 객체는 가비지 컬렉션의 대상이 된다

```jsx
// 식별자 str은 문자열을 값으로 가지고 있다
const str = 'hello';

// 식별자 str은 암묵적으로 생성된 래퍼 객체를 가리킨다.
// 식별자 str의 값 'hello'는 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된다.
// 래퍼 객체에 name 프로퍼티가 동적 추가된다.
str.name = 'Lee';

//  식별자 str은 다시 원래의 문자열, 즉 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된 원시값을 갖는다
// 이때 생성되었던 래퍼 객체는 아무도 참조하지 않는 상태이므로 가비지 컬렉션의 대상이 된다.

// 식별자 str은 새롭게 암묵적으로 생성된 래퍼 객체를 가리킨다.
// 새롭게 생성된 레퍼 객체에는 name 프로퍼티가 존재하지 않는다
console.log(str.name); // undefined

// 식별자 str은 다시 원래의 문자열, 즉 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된 원시값을 갖는다
// 이때 생성되었던 래퍼 객체는 아무도 참조하지 않는 상태이므로 가비지 컬렉션의 대상이 된다.
console.log(typeof str, str); // string hello
```

- 숫자 값도 마찬가지로 숫자값에 대해 마침표 표기법으로 접근하면 래퍼 객체인 Number생성자 함수의 인스턴스가 생성되고 숫자는 래퍼 객체의[[NumberData]] 내부 슬롯에 할당된다.
- 이때 래퍼 객체인 Number 객체는 당연히 Number.prototype의 메서드를 상속받아 사용할 수 있다
- 그 후, 래퍼 객체의 처리가 종료되면 래퍼 객체의 [[NumberData]] 내부 슬롯에 할당된 원시값을 되돌리고 래퍼 객체는 가비지 컬렉션의 대상이 된다.

```jsx
const num = 1.5;

// 원시 타입인 숫자가 래퍼 객체인 Number 객체로 변환된다.
console.log(num.toFixed()); // 2

// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.
console.log(typeof num, num); // number 1.5
```

- 불리언 값도 문자열이나 숫자와 마찬가지이지만 불리언 값으로 메서드를 호출하는 경우는 없으므로 그다지 유용하지는 않다

# 21.4 전역 객체

- 전역 객체 : 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 실행되는 특수한 객체(어떤 객체에도 속하지 않은 최상위 객체)
- 브라우저 환경에서는 window(또는 self, this, frames)가 전역 객체를 가리키지만 Node.js환경에서는 global이 전역 객체를 가리킨다.

- globalThis : ES11에서 도입된 globalThis는 브라우저 환경과 Node.js환경에서 전역 객체를 가리키던 다양한 식별자를 통일한 식별자다.

- 전역객체는 표준 빌트인객체와 호스트객체, 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다.
- 전역 객체 자신은 어떤 객체의 프로퍼티도 아니며 객체의 계층적 구조상 표준 빌트인 객체와 호스트 객체를 프로퍼티로 소유한다는 것을 말한다.

### 전역 객체의 특징

- 전역 객체는 개발자가 의도적으로 생성할 수 없다. 즉, 전역 객체를 생성할 수 있는 생성자 함수가 제공되지 않는다
- 전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있다.

```jsx
// 문자열 'F'를 16진수로 해석하여 10진수로 변환하여 반환한다.
window.parseInt('F', 16); // -> 15
parseInt('F', 16); // -> 15

window.parseInt === parseInt; // -> true
```

- 전역 객체는 Object, String, Number, Boolean, Function, Array, RegExp, Date, Math, Promise 같은 모든 표준 빌트인 객체를 프로퍼티로 가지고 있다.
- 자바스크립트 실행 환경에 따라 추가적으로 프로퍼티와 메서드를 갖는다.
- var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역, 그리고 전역 함수는 전역 객체의 프로퍼티가 된다.

```jsx
// var 키워드로 선언한 전역 변수
var foo = 1;
console.log(window.foo); // 1

// 선언하지 않은 변수에 값을 암묵적 전역. bar는 전역 변수가 아니라 전역 객체의 프로퍼티다.
bar = 2; // window.bar = 2
console.log(window.bar); // 2

// 전역 함수
function baz() { return 3; }
console.log(window.baz()); // 3
```

- let이나, const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다.
- let이나 const 키워드로 선언한 전역 변수는 보이지 않는 개념적인 블록내에 존재하게 된다.

```jsx
let foo = 123;
console.log(window.foo); // undefined
```

- 브라우저 환경의 모든 자바스크립트 코드는 하나의 전역 객체 window를 공유한다. 여러 개의 script 태그를 통해 자바스크립트 코드를 분리해도 하나의 전역 객체 window를 공유하는 것은 변함이 없다. 이는 분리되어 있는 자바스크립트 코드가 하나의 전역을 공유한다는 의미다.

## 21.4.1 빌트인 전역 프로퍼티

- 전역 객체의 프로퍼티를 의미한다.
- 주로 애플리케이션 전역에서 사용하는 값을 제공한다.

- Infinity
- 무한대를 나타내는 숫자 값 Infinity를 갖는다.

```jsx
// 전역 프로퍼티는 window를 생략하고 참조할 수 있다.
console.log(window.Infinity === Infinity); // true

// 양의 무한대
console.log(3/0);  // Infinity
// 음의 무한대
console.log(-3/0); // -Infinity
// Infinity는 숫자값이다.
console.log(typeof Infinity); // number
```

- NaN
- 숫자가 아님(Not-a-Number)을 나타내는 숫자값 NaN을 갖는다. NaN 프로퍼티는 Number.NaN 프로퍼티와 같다.

```jsx
console.log(window.NaN); // NaN

console.log(Number('xyz')); // NaN
console.log(1 * 'string');  // NaN
console.log(typeof NaN);    // number
```

- undefined
- 원시타입 undefined를 값으로 갖는다.

```jsx
console.log(window.undefined); // undefined

var foo;
console.log(foo); // undefined
console.log(typeof undefined); // undefined
```

## 21.4.2 빌트인 전역 함수

- 애플리케이션 전역에서 호출할 수 있는 빌트인 함수로서 전역 객체의 메서드다

- eval
- 자바스크립트 코드를 나타내는 문자열을 인수로 전달받는다.
- 전달받은 문자열 코드가 표현식일 경우 eval 함수는 문자열 코드를 런타임에 평가하여 값을 생성한다
- 전달받은 인수가 표현식이 아닌 문이라면 eval 함수는 문자열 코드를 런타임에 실행한다.
- 문자열 코드가 여러 개의 문으로 이루어져 있다면 모든 문을 실행한다.

```jsx
// 표현식인 문
eval('1 + 2;'); // -> 3

// 표현식이 아닌 문
eval('var x = 5;'); // -> undefined

// eval 함수에 의해 런타임에 변수 선언문이 실행되어 x 변수가 선언되었다.
console.log(x); // 5

// 객체 리터럴은 반드시 괄호로 둘러싼다.
const o = eval('({ a: 1 })');
console.log(o); // {a: 1}

// 함수 리터럴은 반드시 괄호로 둘러싼다.
const f = eval('(function() { return 1; })');
console.log(f()); // 1
```

- 인수로 전달받은 문자열 코드가 여러 개의 문으로 이루어져 있다면 모든 문을 실행한 다음 마지막 결과값을 반환한다.

```jsx
console.log(eval('1 + 2; 3 + 4;')); // 7
```

- eval 함수는 자신이 호출된 위치에 해당하는 기존의 스코프를 런타임에 동적으로 수정한다.

```jsx
const x = 1;

function foo() {
  // eval 함수는 런타임에 foo 함수의 스코프를 동적으로 수정한다.
  eval('var x = 2;');
  console.log(x); // 2
}

foo();
console.log(x); // 1
```

- eval 함수는 새로운 x 변수를 선언하면서 foo 함수의 스코프에 선언된 x 변수를 동적으로 추가한다.
- 함수가 호출되면 런타임 이전에 먼저 함수 몸체 내부의 모든 선언문을 먼저 실행하고 그 결과를 스코프에 등록한다.
- 따라서 위 예제의 eval 함수가 호출되는 시점에는 foo 함수의 스코프가 존재한다.
- 하지만 **eval 함수는 기존의 스코프를 런타임에 동적으로 수정한다.**
- 그리고 eval 함수에 전달된 코드는 이미 그 위치에 존재하던 코드처럼 동작한다.
- 즉 eval 함수가 호출된 foo 함수의 스코프에서 실행된다.
- 단, strict mode에서 eval 함수는 기존의 스코프를 수정하지 않고 eval 함수 자신의 자체적인 스코프를 생성한다.

```jsx
const x = 1;

function foo() {
  'use strict';

  // strict mode에서 eval 함수는 기존의 스코프를 수정하지 않고 eval 함수 자신의 자체적인 스코프를 생성한다.
  eval('var x = 2; console.log(x);'); // 2
  console.log(x); // 1
}

foo();
console.log(x); // 1
```

- 또한 인수로 전달받은 문자열 코드가 let, const 키워드를 사용한 변수 선언문이라면 암묵적으로 strict mode가 적용된다.

```jsx
const x = 1;

function foo() {
  eval('var x = 2; console.log(x);'); // 2
  // let, const 키워드를 사용한 변수 선언문은 strict mode가 적용된다.
  eval('const x = 3; console.log(x);'); // 3
  console.log(x); // 2
}

foo();
console.log(x); // 1
```

- eval 함수를 통해 사용자로부터 입력받은 콘텐츠를 실행하는 것은 보안에 매우 취약하다
- eval 함수를 통해 실행되는 코드는 자바스크립트 엔진에 의해 최적화가 수행되지 않으므로 일반적인 코드 실행에 비해 처리 속도가 느리다.
- 따라서 eval 함수의 사용은 금지해야한다.

- isFinite
- 전달받은 인수가 정상적인 유한수인지 검사하여 유한수이면 true를 반환하고, 무한수이면 false를 반환한다.
- 전달받은 인수의 타입이 숫자가 아닌 경우, 숫자로 타입을 변환한 후 검사를 수행한다.
- 이때 인수가 NaN으로 평가되는 값이라면 false를 반환한다.

```jsx
// 인수가 유한수이면 true를 반환한다.
isFinite(0);    // -> true
isFinite(2e64); // -> true
isFinite('10'); // -> true: '10' → 10(문자열->숫자)
isFinite(null); // -> true: null → 0(null->0)

// 인수가 무한수 또는 NaN으로 평가되는 값이라면 false를 반환한다.
isFinite(Infinity);  // -> false
isFinite(-Infinity); // -> false

// 인수가 NaN으로 평가되는 값이라면 false를 반환한다.
isFinite(NaN);     // -> false
isFinite('Hello'); // -> false
isFinite('2005/12/12'); // -> false
```

- isFinite(null)은 true를 반환한다. → null을 숫자로 변환하여 검사를 수행했기 때문 →  null은 숫자타입으로 변환하면 0이된다.

```jsx
console.log(+null); // 0
```

- isNaN
- 전달받은 인수가 NaN인지 검사하여 그 결과를 불리언 타입으로 반환한다.
- 전달받은 인수의 타입이 숫자가 아닌 경우 숫자로 타입을 변환한 후 검사를 수행한다.

```jsx
// 숫자
isNaN(NaN); // -> true
isNaN(10);  // -> false

// 문자열
isNaN('blabla'); // -> true: 'blabla' => NaN
isNaN('10');     // -> false: '10' => 10
isNaN('10.12');  // -> false: '10.12' => 10.12
isNaN('');       // -> false: '' => 0
isNaN(' ');      // -> false: ' ' => 0

// 불리언
isNaN(true); // -> false: true → 1
isNaN(null); // -> false: null → 0

// undefined
isNaN(undefined); // -> true: undefined => NaN

// 객체
isNaN({}); // -> true: {} => NaN

// date
isNaN(new Date());            // -> false: new Date() => Number
isNaN(new Date().toString()); // -> true:  String => NaN
```

- parseFloat
- 전달받은 문자열 인수를 부동 소수점 숫자(실수)로 해석하여 반환한다.

```jsx
// 문자열을 실수로 해석하여 반환한다.
parseFloat('3.14');  // -> 3.14
parseFloat('10.00'); // -> 10

// 공백으로 구분된 문자열은 첫 번째 문자열만 변환한다.
parseFloat('34 45 66'); // -> 34
parseFloat('40 years'); // -> 40

// 첫 번째 문자열을 숫자로 변환할 수 없다면 NaN을 반환한다.
parseFloat('He was 40'); // -> NaN

// 앞뒤 공백은 무시된다.
parseFloat(' 60 '); // -> 60
```

- parseInt
- 전달받은 문자열 인수를 정수로 해석하여 반환한다.
- 전달받은 인수가 문자열이 아니면 문자열로 변환한 다음 정수로 해석하여 반환한다.
- 두번째 인수로 진법을 나타내는 기수를 전달할 수 있다.
- 기수를 지정하면 첫번째 인수로 전달된 문자열을 해당 기수의 숫자로 해석하여 반환한다.
- 이때 반환 값은 언제나 10진수이다.
- 기수를 생략하면 첫번째 인수로 전달된 문자열을 10진수로 해석하여 반환한다.

```jsx
// 문자열을 정수로 해석하여 반환한다.
parseInt('10');     // -> 10
parseInt('10.123'); // -> 10

parseInt(10);     // -> 10
parseInt(10.123); // -> 10

// 10'을 10진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt('10'); // -> 10
// '10'을 2진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt('10', 2); // -> 2
// '10'을 8진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt('10', 8); // -> 8
// '10'을 16진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt('10', 16); // -> 16
```

- 참고
- 기수를 지정하여 10진수 숫자를 해당 기수의 문자열로 변환하여 반환하고 싶을 때는 Number.prototype.toString 메서드를 사용한다.

```jsx
const x = 15;

// 10진수 15를 2진수로 변환하여 그 결과를 문자열로 반환한다.
x.toString(2); // -> '1111'
// 문자열 '1111'을 2진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt(x.toString(2), 2); // -> 15

// 10진수 15를 8진수로 변환하여 그 결과를 문자열로 반환한다.
x.toString(8); // -> '17'
// 문자열 '17'을 8진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt(x.toString(8), 8); // -> 15

// 10진수 15를 16진수로 변환하여 그 결과를 문자열로 반환한다.
x.toString(16); // -> 'f'
// 문자열 'f'를 16진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt(x.toString(8), 8); // -> 15

// 숫자값을 문자열로 변환한다.
x.toString(); // -> '15'
// 문자열 '15'를 10진수로 해석하고 그 결과를 10진수 정수로 반환한다
parseInt(x.toString()); // -> 15
```

- 두번째 인수로 진법을 나타내는 기수를 지정하지 않더라도 첫번째 인수로 전달된 문자열이 “0x” 또는 “0X”로 시작하는 16진수 리터럴이라면 16진수로 해석하여 10진수 정수로 반환한다.

```jsx
// 16진수 리터럴 '0xf'를 16진수로 해석하고 10진수 정수로 그 결과를 반환한다.
parseInt('0xf'); // -> 15
// 위 코드와 같다.
parseInt('f', 16); // -> 15
```

- 하지만 2진수 리터럴과 8진수 리터럴은 제대로 해석하지 못한다.

```jsx
// 2진수 리터럴(0b로 시작)은 제대로 해석하지 못한다. 0 이후가 무시된다.
parseInt('0b10'); // -> 0
// 8진수 리터럴(ES6에서 도입. 0o로 시작)은 제대로 해석하지 못한다. 0 이후가 무시된다.
parseInt('0o10'); // -> 0
```

- ES6부터는 “0”으로 시작하는 숫자를 8진수로 해석하지 않고 10진수로 해석한다. 따라서 문자열을 8진수로 해석하려면 지수를 반드시 지정해야한다.

```jsx
// 문자열 '10'을 2진수로 해석한다.
parseInt('10', 2); // -> 2
// 문자열 '10'을 8진수로 해석한다.
parseInt('10', 8); // -> 8
```

- 첫번째 인수로 전달한 문자열의 첫번째 문자가 해당 지수의 숫자로 변환될 수 없다면 NaN을 반환한다.

```jsx
// 'A'는 10진수로 해석할 수 없다.
parseInt('A0'); // -> NaN
// '2'는 2진수로 해석할 수 없다.
parseInt('20', 2); // -> NaN
```

- 첫번째 인수로 전달한 문자열의 두번째 문자부터 해당 진수를 나타내는 숫자가 아닌 문자와 마주치면 이문자와 계속되는 문자들은 전부 무시되며 해석된 정수값만 반환한다.

```jsx
// 10진수로 해석할 수 없는 'A' 이후의 문자는 모두 무시된다.
parseInt('1A0'); // -> 1
// 2진수로 해석할 수 없는 '2' 이후의 문자는 모두 무시된다.
parseInt('102', 2); // -> 2
// 8진수로 해석할 수 없는 '8' 이후의 문자는 모두 무시된다.
parseInt('58', 8); // -> 5
// 16진수로 해석할 수 없는 'G' 이후의 문자는 모두 무시된다.
parseInt('FG', 16); // -> 15
```

- 첫번째 인수로 전달한 문자열에 공백이 있다면 첫번째 문자열만 해석하여 반환하며 앞뒤 공백은 무시된다. 만일 첫번째 문자열을 숫자로 해석할 수 없는 경우 NaN을 반환한다.

```jsx
// 공백으로 구분된 문자열은 첫 번째 문자열만 변환한다.
parseInt('34 45 66'); // -> 34
parseInt('40 years'); // -> 40
// 첫 번째 문자열을 숫자로 변환할 수 없다면 NaN을 반환한다.
parseInt('He was 40'); // -> NaN
// 앞뒤 공백은 무시된다.
parseInt(' 60 '); // -> 60
```

- encodeURI/ decodeURI
- encodeURI는 완전한 URI를 문자열로 전달받아 이스케이프 처리를 위해 인코딩한다.
- URI는 인터넷에 있는 자원을 나타내는 유일한 주소를 말한다.
- URI의 하위 개념으로 URL, URN이 있다.

![Untitled](https://user-images.githubusercontent.com/75876669/207602537-a905d42b-920e-4c8e-89c1-373526c914ee.png)

- 인코딩 : URI의 문자들을 이스케이프 처리하는 것
- 이스케이프 처리는 네트워크를 통해 정보를 공유할 때 어떤 시스템에서도 읽을 수 있는 아스키 문자 set으로 변환하는 것이다.
- UTF-8 특수문자의 경우 1문자당 1~3바이트  UTF-8 한글 표현의 경우 1문자당 3바이트다.

- URL은 아스키 문자 셋으로만 구성되어야 하며 한글을 포함한 대부분의 외국어나 아스키 문자 셋에 정의되지 않은 특수 문자의 경우 URL에 포함될 수 없다.
- 띠리사 URL 내에서 의미를 갖고 있는 문자(%, ?, #)나 URL에 올 수 없는 문자(한글, 공백 등) 또는 시스템에 의해 해석될 수 있는 문자 (<, >)를 이스케이프 처리하여 야기될 수 있는 문제를 예방하기 위해 이스케이프 처리가 필요하다.

![Untitled](https://user-images.githubusercontent.com/75876669/207602642-42781ac7-cce1-4ce3-be3a-162989c3bc1f.png)

![Untitled](https://user-images.githubusercontent.com/75876669/207602715-f0181a2d-f0c1-42aa-87da-b5c7fc62fc6a.png)

- decodeURI 함수는 인코딩된 URI를 인수로 전달받아 이스케이프 처리 이전으로 디코딩한다.

![Untitled](https://user-images.githubusercontent.com/75876669/207602984-8d8b37b7-77ac-47b2-a4d5-2198746955ce.png)

- encodeURIComponent / decodeURIComponent
- encodeURIComponent 함수는 URI 구성요소를 인수로 전달받아 인코딩한다.
- decodeURIComponent 함수는 매개변수로 전달된 URI 구성요소를 디코딩한다.

- encodeURIComponent 함수는 인수로 전달된 문자열을 URI의 구성요소인 쿼리 스트링의 일부로 간주한다.
- 따라서 쿼리 스트링 구분자로 사용되는 =, ?, &까지 인코딩한다.
- encodeURI 함수는 매개변수로 전달된 문자열을 완전한 URI 전체라고 간주한다.
- 따라서 쿼리 스트링 구분자로 사용되는 =, ?, &은 인코딩하지 않는다.

![Untitled](https://user-images.githubusercontent.com/75876669/207603062-8b331105-d116-4af0-ab57-da0ca6687858.png)

## 21.4.3 암묵적 전역

```jsx
var x = 10; // 전역 변수

function foo () {
  // 선언하지 않은 식별자에 값을 할당
  y = 20; // window.y = 20;
}
foo();

// 선언하지 않은 식별자 y를 전역에서 참조할 수 있다.
console.log(x + y); // 30
```

- foo 함수 내의 y는 선언하지 않은 식별자다.
- 고로 y = 20; 이 실행되면 참조 에러가 발생할 것처럼 보인다.
- 하지만 선언하지 않은 식별자 y는 마치 선언된 전역 변수처럼 동작한다.
    
    → 선언하지 않은 식별자에 값을 할당하면 전역 객체의 프로퍼티가 되기 때문이다.
    

- foo 함수가 호출되면 자바스크립트 엔진은 y 변수에 값을 할당하기 위해 먼저 스코프 체인을 통해 선언된 변수인지 확인한다.
- 하지만 foo함수의 스코프와 전역 스코프 어디에도 y변수의 선언을 찾을 수 없으므로 참조 에러가 발생한다.
- 하지만 자바스크립트엔진은 y = 20을 window.y = 20으로 해석하여 전역 객체에 프로퍼티를 동적 생성한다.
- 결국 y는 전역 객체의 프로퍼티가 되어 마치 전역 변수처럼 동작한다.
- 이러한 현상을 암묵적 전역이라한다.

```jsx
// 전역 변수 x는 호이스팅이 발생한다.
console.log(x); // undefined
// 전역 변수가 아니라 단지 전역 객체의 프로퍼티인 y는 호이스팅이 발생하지 않는다.
console.log(y); // ReferenceError: y is not defined

var x = 10; // 전역 변수

function foo () {
  // 선언하지 않은 식별자에 값을 할당
  y = 20; // window.y = 20;
}
foo();

// 선언하지 않은 식별자 y를 전역에서 참조할 수 있다.
console.log(x + y); // 30
```

- 또한 변수가 아니라 프로퍼티인 y는 delete 연산자로 삭제할 수 있다.
- 전역 변수는 프로퍼티이지만 delete 연산자로 삭제할 수 없다.

```jsx
var x = 10; // 전역 변수

function foo () {
  // 선언하지 않은 식별자에 값을 할당
  y = 20; // window.y = 20;
  console.log(x + y);
}

foo(); // 30

console.log(window.x); // 10
console.log(window.y); // 20

delete x; // 전역 변수는 삭제되지 않는다.
delete y; // 프로퍼티는 삭제된다.

console.log(window.x); // 10
console.log(window.y); // undefined
```